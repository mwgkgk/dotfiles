# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
;;; `date-utc` ;;;
${0}
endsnippet

snippet dd "dd" b
`date-utc`
endsnippet

# ||
# || Comments
# ||

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

# TODO generate the appropriate amount of ======
# Maybe rethink shortcut but this is muscle memory
snippet # "#" b
;;;
;;; ${VISUAL}$0
;;;
endsnippet

# ||
# || Headers
# ||

snippet l "#lang" b
#lang ${1:racket}$0
endsnippet

# ||
# || Vars
# ||

snippet "(\()?\bv|define|def" "define-variable" rw
(define $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bdv" "define-values" rw
(define-values (${1:names}) (values ${0:#f})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Structs
# ||

snippet "(\()?\bs" "struct" rw
(struct ${1:struct-name}
	(${0:fields})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "(\()?\bf" "define-function" rw
(define (${1:function-name})
	${0:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet l "lambda" w
(lambda (${1:x}) ${0:#f})
endsnippet

# ||
# || Basement
# ||

snippet /^$/ "basement-implicit" r
#;
(quote
	${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = "#f"`}
	null)
endsnippet

# ||
# || Let
# ||

snippet "(\()?\blet" "let" wr
(let
	([$1])
	${0:null}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?\bcond" "cond" r
(cond
	[$0]`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Quotes
# ||

snippet ' "'" w
'(${VISUAL}$0)
endsnippet

snippet ` "`" w
\`(${VISUAL}$0)
endsnippet

# ||
# || Fallbacks
# ||

priority -2

snippet /^([\!:\w=\-\+><\*]+)/ "expand-any-word-b" br
(define `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` (${1:list})
	${0:nil})
endsnippet

priority -3

snippet  /([\!:\w=\-\+><\*]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $1)
endsnippet
