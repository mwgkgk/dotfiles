# ||
# || Date
# ||

snippet / *da(te)?/ "Date" rb
;;; `date-utc` ;;;
${0}
endsnippet

snippet dd "dd" b
`date-utc`
endsnippet

# ||
# || Comments
# ||

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

# TODO generate the appropriate amount of ======
# Maybe rethink shortcut but this is muscle memory
snippet # "#" b
;;;
;;; ${VISUAL}$0
;;;
endsnippet

# ||
# || Headers
# ||

snippet /^l/ "#lang" br
#lang ${0:typed/racket}
endsnippet

# ||
# || Vars
# ||

snippet "(\()?\b(define|def|d)" "define-variable" rw
(define $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bdv" "define-values" rw
(define-values (${1:names}) (values ${0:#f})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority -1

snippet "(\()?\bs" "set!" rw
(set! $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority 0

# ||
# || Structs
# ||

snippet "^(\()?\bs" "struct" rw
(struct ${1:struct-name}
	(${0:fields})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet m "#:mutable" w
#:mutable
endsnippet

snippet tr "#:transparent" w
#:transparent
endsnippet

snippet g "#:guard" w
#:guard (λ ($1)
	${0:null})
endsnippet

# ||
# || Types
# ||

# TODO add empty-line case for when next line is define
snippet : ":" w
(: )
endsnippet

# ||
# || Functions
# ||

snippet "(\()?\bf" "define-function" rw
(define (${1:function-name})
	${0:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority -1

snippet l "lambda" w
(λ (${1:x}) ${0:${VISUAL}})
endsnippet

priority 0

# ||
# || Basement
# ||

snippet /^$/ "basement-implicit" r
#;
(quote
	${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = "#f"`}
	null)
endsnippet

# ||
# || Let
# ||

snippet "(\()?\blet" "let" wr
(let ([$1])
	${0:null}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?\bcond" "cond" r
(cond
	[$0]`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Blocks
# ||

snippet "(\()?\b(progn|begin|b)" "begin" rw
(begin
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Loops
# ||

snippet "(\()?\bfor" "for" rw
(for ([$1])
	${0:null}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bfor\*" "for*" rw
(for* ([$1])
	${0:null}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Quotes
# ||

snippet ' "'" w
'(${VISUAL}$0)
endsnippet

snippet ` "`" w
\`(${VISUAL}$0)
endsnippet

# ||
# || Macros
# ||

snippet "(\()?\b(ds|fs)" "define-syntax" rw
(define-syntax $1
	(syntax-rules ()
		[($0)])`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bdsr" "define-syntax-rule" rw
(define-syntax-rule ($1)
	${0:null}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Strings
# ||

snippet "(\()?\bsl" "string-length" rw
(string-length ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Printing
# ||

snippet "(\()?\bbr" "newline" rw
(newline`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(display|displa|displ|disp|dis|di|p)" "displayln" rw
(displayln ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bw" "writeln" rw
(writeln ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(printf|print|prin|pri|pr|pf|fmt)" "printf" rw
(printf "$1" ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Higher-order functions
# ||

snippet "(\()?\bcomp" "compose" rw
(compose `!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Fallbacks
# ||

priority -1

snippet /([\!:\w=\-\+><\*\/\?\.]+):/ "expand-any-word-as-keyword" rw
#:`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet /([\!:\w=\-\+><\*\/\?\.]*[\!:\w=\-\+><\*\/\?])\./ "expand-any-word-as-no-arguments-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`)$0
endsnippet

snippet /([\!:\w=\-\+><\*\/\?\.]+),/ "expand-any-word-as-compose" rw
(compose `!p
if match.group(1) is not None:
	snip.rv = match.group(1)` $0)
endsnippet

snippet /([\!:\w=\-\+><\*\/\?\.]+)\.\./ "expand-any-word-as-square-brackets-list" rw
[`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` $0]
endsnippet

priority -2

snippet /^([\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word-b" br
(define (`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`$1)
	${0:nil})
endsnippet

snippet /^([\!:\w=\-\+><\*\/\?\.]+ )/ "expand-any-word-b-args" br
(define (`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`${1:list})
	${0:nil})
endsnippet

priority -3

snippet  /([\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

priority -4

snippet  /(\(([\!:\w=\-\+><\*\/\?\.]+\s*)+\))/ "expand-any-one-level-form" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet
