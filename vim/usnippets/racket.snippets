# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
;;; `date-utc` ;;;
${0}
endsnippet

snippet dd "dd" b
`date-utc`
endsnippet

# ||
# || Comments
# ||

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

# TODO generate the appropriate amount of ======
# Maybe rethink shortcut but this is muscle memory
snippet # "#" b
;;;
;;; ${VISUAL}$1
;;;
endsnippet

# ||
# || Headers
# ||

snippet l "#lang" b
#lang ${1:racket}$2
endsnippet

# ||
# || Vars
# ||

snippet "(\()?\bv" "define-variable" rw
(define ${1:name} ${2:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "(\()?\bf" "define-function" rw
(define (${1:name})
	${2:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet l "lambda" w
(lambda (${1:x}) ${2:#f})
endsnippet

# ||
# || Basement
# ||

snippet /^$/ "basement-implicit" r
#;
(quote
	${VISUAL}${1:`!p
if not snip.v.text:
	snip.rv = "#f"`}
	null)
endsnippet

# ||
# || Let
# ||

snippet "(\()?\blet" "let" wr
(let
	([$1 ${3:(${2:${VISUAL}})}]$4)
	${5:$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet lc "let clause" w
[${1:x} ($2)]$3
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?\bcond" "cond" r
(cond
	[(${1:equal? x y}) ${2:#f}]$3`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet cc "cond clause" w
[${3:(${1:equal?}$2)} $4]$5
endsnippet

# ||
# || Quotes
# ||

snippet ' "'" w
'(${VISUAL}$1)$2
endsnippet

snippet ` "`" w
\`(${VISUAL}$1)$2
endsnippet

# ||
# || Fallbacks
# ||

priority -2

snippet /^([\!:\w=\-\+><\*]+)/ "expand-any-word-b" br
(define `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` (${1:list})
	${0:nil})
endsnippet

priority -3

snippet  /([\!:\w=\-\+><\*]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $1)
endsnippet
