# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
-- `date-utc`
${0}
endsnippet

# ||
# || Comment
# ||

snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
--[[ `!v system('date-jiv | tr -d "\n"')`
${VISUAL}$0
]]--
endsnippet

snippet ; "comment" w
-- ${VISUAL}$0
endsnippet

snippet - "comment" b
-- ${VISUAL}$0
endsnippet

snippet * "section" w
-- ||
-- || ${VISUAL}$0
-- ||
endsnippet

# ||
# || Header
# ||

snippet #! "Shebang header" b
#!/usr/bin/env lua
$0
endsnippet

# ||
# || Import
# ||

snippet i "require @ beginning of line" b
local ${1:awful} = require("$0${2:$1}")
endsnippet

snippet il "require sub-dir" b
local ${1:dzen2} = require("$0.$1")
endsnippet

snippet ext "require in ext/" b
local ${1:dimensions} = require("ext.$1")
endsnippet

snippet req "require midline" w
require("$0")
endsnippet

# ||
# || Modules
# ||

snippet mod "mod" b
local ${1:`!p snip.rv = snip.basename`} = {}

${VISUAL}$0

return $1
endsnippet

snippet dm "date mod" b
-- `date-utc`

local `!p snip.rv = snip.basename` = {}

${VISUAL}$0

return `!p snip.rv = snip.basename`
endsnippet

# ||
# || Function
# ||

snippet lf "Tab_trigger" w
local function ${1:new_function}(${2:c})
   ${VISUAL}$0
end
endsnippet

snippet f "function" b
function `!p snip.rv = snip.basename`.${1:new_function}(${2:c})
   ${VISUAL}$0
end
endsnippet

priority -1

snippet f "lambda" w
function()
	${VISUAL}$0
end
endsnippet

priority 0

# ||
# || Scope
# ||

snippet do "do" i
do
	$0
end
endsnippet

# ||
# || Conditionals
# ||

snippet if "if" b
if $1 then
	${VISUAL}$0
end
endsnippet

snippet then "then" i
then
	${VISUAL}$0
end
endsnippet

snippet else "else" i
else
	${VISUAL}$0
endsnippet

# ||
# || For loops
# ||

snippet for "pair for loop" b
for ${1:k},${2:v} in ipairs(${3:table_name}) do
   ${VISUAL}$0
end
endsnippet

snippet fori "ipair for foop" b
for ${1:idx},${2:val} in ipairs(${3:table_name}) do
   ${VISUAL}$0
end
endsnippet

snippet forn "numeric for loop" b
for ${1:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
   ${VISUAL}$0
end
endsnippet

# ||
# || Vars
# ||

snippet /\b(l|local)/ "local x = {}" r
local ${1:x} = ${0:{}}
endsnippet

# ||
# || Tables
# ||

snippet join "gears.table.join" w
gears.table.join(${VISUAL}$0)
endsnippet

# ||
# || Keys
# ||

snippet key "fake_input" w
root.fake_input("key_press", "$1")
root.fake_input("key_release", "$1")
endsnippet

snippet delay "delay" w
gears.timer {
	timeout = 0.15,
	autostart = true,
	single_shot = true,
	callback = function()
		${VISUAL}$0
	end
}
endsnippet

snippet ctrl "Control_L" w
root.fake_input("key_press", "Control_L")
${VISUAL}$0
root.fake_input("key_release", "Control_L")
endsnippet

snippet alt "alt" w
root.fake_input("key_press", "Alt_L")
${VISUAL}$0
root.fake_input("key_release", "Alt_L")
endsnippet

snippet shift "shift" w
root.fake_input("key_press", "Shift_L")
${VISUAL}$0
root.fake_input("key_release", "Shift_L")
endsnippet

snippet super "super" w
root.fake_input("key_press", "Super_L")
${VISUAL}$0
root.fake_input("key_release", "Super_L")
endsnippet

# ||
# || Print
# ||

snippet p "print" w
print(${VISUAL}$0)
endsnippet

snippet mes "message" b
message(${2:'${1:Hi}'})
endsnippet

snippet help "help" b
local function print_help()
	print "Missing help."
end
endsnippet

snippet n "naughty" w
naughty.notify({ text = $0, timeout = 2 })
endsnippet

# ||
# || Shell
# ||

snippet ex "exec" b
os.execute(${1:"$0"})
endsnippet

# ||
# || Fallbacks
# ||

priority -4

snippet /([\w]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`($0)
endsnippet
