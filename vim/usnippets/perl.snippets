extends cnpp.perl

# ||
# || Modules
# ||

snippet /(use|u)/ "use" rb
use $0;
endsnippet

snippet utf "utf" b
use utf8;
use open ":std", ":encoding(UTF-8)";
endsnippet

snippet exp "export" b
our @export = qw( ${VISUAL}$0 );
endsnippet

snippet pex "pex" b
package $0;

our @export = qw(  );
endsnippet

# ||
# || Date
# ||

snippet /^ *da(te)?/ "Date" rb
# `date-utc`
${0}
endsnippet

snippet da "date-file-start" "snip.line == 0" e
#!/usr/bin/env perl

use v5.10;
use strict;
use warnings;

# `date-utc`

$0
endsnippet

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

# ||
# || Comments
# ||

snippet ; "comment-generic" w
# ${VISUAL}$0
endsnippet

snippet \ "comment-forth" w
# ${VISUAL}$0
endsnippet

snippet # "comment-#" w
# ${VISUAL}$0
endsnippet

snippet /^\*/ "section" r
# ||
# || ${VISUAL}$0
# ||
endsnippet

snippet /^(\s*)(// )?(T|td)/ "TODO-comment" r
`!p
# Whitespace:
if match.group(1) is not None:
	snip.rv = match.group(1)`# TODO ${VISUAL}$0
endsnippet

# snippet /^$/ "basement-implicit" "snip.line > 0 and re.match('^$', snip.buffer[snip.line-1])" re
# =begin comment `date-jiv`

# ${VISUAL}$0

# =end comment
# =cut
# endsnippet

snippet ba "basement" w
# =begin comment `date-jiv`

# ${VISUAL}$0

# =end comment
# =cut
endsnippet

# ||
# || Package
# ||

snippet pkg "package" b
package $1 {
	${VISUAL}$0
}
endsnippet

snippet defcl "Moose class" b
package $1 {
	use Moose;

	${VISUAL}$0
}
endsnippet

# ||
# || Strings
# ||

snippet qw "qw" w
qw( ${VISUAL}$0 )
endsnippet

# ||
# || Print
# ||

snippet /\b(say|sa|s)/ "say" r
say "${VISUAL}$0";
endsnippet

snippet p "say minus quotes" w
say ${VISUAL}$0;
endsnippet

snippet pr "print" w
print ${VISUAL}$0;
endsnippet

snippet /\b(chomp|chom|cho)/ "chomp" wr
chomp(${VISUAL}$0);
endsnippet

# ||
# || Standard I/O
# ||

snippet si "<STDIN>" w
<STDIN>
endsnippet

# ||
# || Files
# ||

snippet fh "fh" w
open my $fh, '<:encoding(utf8)', $${0:filepath} or die 'File not found';
${VISUAL}
close $fh;
endsnippet

# ||
# || Subroutines
# ||

snippet /^\b(sub|f)/ "sub" wr
sub ${1:name} {
	${VISUAL}$0
}
endsnippet

snippet r "return" w
return ${VISUAL}$0
endsnippet

snippet map "map" w
map { $_$0 } @_
endsnippet

snippet mapj "map join" w
join "\n", map { $_$0 } @_
endsnippet

snippet l "lambda" w
{ ${VISUAL}$0 }
endsnippet

# ||
# || Loops
# ||

snippet for1 "for"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${VISUAL}$0
}
endsnippet

snippet for "foreach"
for$2 (@${1:_}) {
	${VISUAL}$0
}
endsnippet

# ||
# || Control flow
# ||

snippet { "{" w
{
	${VISUAL}$0
}
endsnippet

snippet if "if"
if ($1) {
	${VISUAL}$0
}
endsnippet

snippet } "} else" w
} else {
	${VISUAL}$0
}
endsnippet

snippet /el(se)?/ "else" rw
else {
	${VISUAL}$0
}
endsnippet

snippet /elsif|eli|ei/ "elsif" rw
elsif ($1) {
	${VISUAL}$0
}
endsnippet

snippet unless "unless"
unless ($1) {
	${VISUAL}$0
}
endsnippet

snippet while "while"
while ($1) {
	${VISUAL}$0
}
endsnippet

# ||
# || Variables
# ||

snippet /\bmy/ "my" r
my ${VISUAL}$0;
endsnippet

snippet /\bm/ "my ($0) = @_" r
my ($$0) = @_;
endsnippet

snippet let "let" w
my ${VISUAL}$0
endsnippet

snippet $ "$variable" w
my $$1 = ${VISUAL}$0;
endsnippet

snippet @ "@array" w
my @$1 = ${VISUAL}$0;
endsnippet

snippet % "%hash" w
my %$1 = ${VISUAL}$0;
endsnippet

# ||
# || Processes
# ||

snippet ` "``" w
`${VISUAL}$0`
endsnippet

# ||
# || Testing
# ||

snippet is "is" w
is ${VISUAL}$0;
endsnippet

# ||
# || Fallback
# ||

priority -2

snippet  /;$/ "expand-endline-semicolon" rw
; # ${VISUAL}$0
endsnippet

snippet /([:\w]+)\$/ "expand-any-word-as-scalar" r
$`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet /([:\w]+)@/ "expand-any-word-as-array" r
@`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet /([:\w]+)%/ "expand-any-word-as-hash" r
%`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

priority -3

# snippet  /^\s+([:\w]+)$/ "expand-any-word-endline" rw
# `!p
# if match.group(0) is not None:
# 	snip.rv = match.group(0)`(${VISUAL}$0);
# endsnippet

snippet  /([:\w\(\)\{\}]+-)/ "expand-any-word-minus" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`>${VISUAL}$0
endsnippet

priority -4

snippet  /([:\w\(\)\{\}]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`->${VISUAL}$0
endsnippet
