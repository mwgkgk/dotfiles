# ||
# || Date
# ||

snippet da "date-file-start" "snip.line == 0" e
% `date-utc`

-module(${0:`!p snip.rv = snip.basename or "module"`}).

$0
endsnippet

priority -1

snippet / *da(te)?/ "Date" rb
% `date-utc`
${0}
endsnippet

priority 0

# ||
# || Basement
# ||

# See UltiSnips-custom-context-snippets
snippet /^$/ "basement-implicit" "snip.line > 0 and re.match('^$', snip.buffer[snip.line-1])" re
-ifdef(comment).
${VISUAL}$0
-endif. % `date-jiv`
endsnippet

snippet dab "dab" w
% `date-utc`

-ifdef(comment).
${VISUAL}$0
-endif. % `date-jiv`
endsnippet

# ||
# || Comments
# ||

snippet % "%-comment" w
% ${VISUAL}$0
endsnippet

snippet ; "comment-generic" w
% ${VISUAL}$0
endsnippet

snippet t "todo-comment" w
% TODO ${VISUAL}$0
endsnippet

# ||
# || Modules
# ||

# Optional "-" here is outside the word boundary (denoted by \b), 
# because python regex word characters.
snippet /^\s*\-?\b(module|mod|m)/ "-module" br
-module(${0:`!p snip.rv = snip.basename or "module"`}).
endsnippet

snippet /^\s*\-?\b(export|exp|e)/ "-export" br
-export([${1:name}/${0:0}]).
endsnippet

# ||
# || Macros
# ||

snippet def "Define Directive"
-define(${1:macro}, ${0:body}).
endsnippet

# ||
# || Functions
# ||

snippet f "Function"
${1:name}($2) ->
	${VISUAL}${0:0}.
endsnippet

snippet fun "Fun Expression"
fun
	(${1:pattern})->
		${2:body}
end$0
endsnippet

# ||
# || Format
# ||

snippet /\b(format|fmt|fm|iof)/ "io:format" wr
io:format("$1", [${2:${VISUAL}}])$0
endsnippet

snippet p "print" w
io:format("$1")$0
endsnippet

# ||
# || Lists
# ||

snippet mem "lists:member" w
lists:member(${1:X}, ${2:List})
endsnippet

# ||
# || Conditionals
# ||

snippet if "if" w
if
	${1:guard} ->
		${2:body}
end$0
endsnippet

snippet case "Case Expression"
case ${1:expression} of
	${2:pattern} ->
		${3:body};
end
endsnippet

snippet - "->" w
-> $0
endsnippet

# ||
# || Braces
# ||

snippet ( "parens" i
(${VISUAL}$0)
endsnippet

snippet [ "square brackets" i
[${VISUAL}$0]
endsnippet

snippet | "bar" w
[${1:Head}|${2:Tail}]
endsnippet

snippet { "curly brackets" i
{${VISUAL}$0}
endsnippet


# ||
# || Fallbacks
# ||

priority -2

snippet /^(\b.*\))$/ "expand-endline-paren-to-arrow" rw
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` -> ${VISUAL}$0
endsnippet

snippet /^(\b.*\)) \-> ?$/ "expand-endline-arrow-to-newline" rw
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ->
	${VISUAL}$0
endsnippet

snippet /^(\s+\b.*\))$/ "expand-endline-paren-to-period" rw
`!p
if match.group(1) is not None:
    snip.rv = match.group(1)`.$0
endsnippet

snippet /^(.*);$/ "expand-endline-period-to-semicolon" rw
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;$0
endsnippet

snippet /^(.*);$/ "expand-endline-semicolon-to-period" rw
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`.$0
endsnippet

priority -3

snippet  /^([\!:\w=\-]+)/ "expand-any-word-b" rb
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`(${1:X}) -> ${VISUAL}$0.
endsnippet

priority -4

snippet  /([\!:\w=\-]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`(${1:X})$0
endsnippet
