# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
;;; `date-utc`
${0}
endsnippet

# ||
# || Comments
# ||

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

snippet | "|" b
;;; |||
;;; ||| ${VISUAL}$1
;;; |||$0
endsnippet

# ||
# || Modules
# ||

snippet mo "mo" b
(defmodule ${1:name})
endsnippet

snippet "(\()?\bex" "export" rw
(export ($1)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Records
# ||

snippet "(\()?\br" "defrecord" rw
(defrecord ${1:name}
	${2:'false}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Maps
# ||

priority -1

snippet m "m" w
(map $1)
endsnippet

priority 0

# ||
# || Macros
# ||

snippet "^(\()?\bm" "m" rb
(defmacro ${1:name} ($3${2:&body body})
	${4:'false}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "(\()?\bf" "defun" rw
(defun $1 ($2)
	${0:'false}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet l "lambda" w
(lambda (${1:x}) ${2:'false})
endsnippet

snippet h "function head" w
(($1) $2)
endsnippet

snippet w "when" w
(when $1)
endsnippet

# ||
# || Basement
# ||

snippet /^$/ "basement-implicit" rb
#|

${VISUAL}${1:`!p
if not snip.v.text:
	snip.rv = "'false"`}

|#
endsnippet

# ||
# || Printing
# ||

snippet "(\()?\bp" "print" wr
(io:format "${3:${2:~a}~n}" ${1:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Fallbacks
# ||

priority -2

snippet /^([\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word-b" br
(defun $1 ($2)
	${0:'false}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority -3

snippet  /([\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

priority -4

snippet  /(\(([\!:\w=\-\+><\*\/\?\.]+\s*)+\))/ "expand-any-one-level-form" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet
