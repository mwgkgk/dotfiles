# ||
# || Date
# ||

snippet /d(a)?(te)?/ "Date" rb
// `date-utc` //
$0
endsnippet

snippet dd "dd-comment" b
// `!v system('date-jiv | tr -d "\n"')` ${0}
endsnippet
priority -1

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')` ${0}
endsnippet

priority 0

# ||
# || Packages
# ||

snippet i "import" b
import (
	"${1:fmt}"
)
endsnippet

snippet /^p/ "package" r
package ${1:main}
endsnippet

# ||
# || Func
# ||

snippet f "function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:bool} {
	${0:${VISUAL}}
}
endsnippet

snippet main "main" b
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet m "Method" b
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

# ||
# || Const
# ||

snippet c "const" w
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet cc "consts" w
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

# ||
# || Var
# ||

snippet var "Variable declaration" !b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" !b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

# ||
# || Control Flow
# ||

snippet for "For loop" !b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" !b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" !b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet } "else" w
} else {
	${VISUAL}$1
}$2
endsnippet

snippet switch "Switch statement" !b
switch ${1:expression}${1/(.+)/ /}{
case${0}
}
endsnippet

snippet case "Case clause" !b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet default "Default clause" !b
default:
	${0:${VISUAL}}
endsnippet

snippet sel "select" w
select {
	case $1:
		$2
}
endsnippet

# ||
# || Utils
# ||

priority -1

snippet p "fmt.Println" w
fmt.Println(${3:"${1:Type: %T Value: %v\n}"}$2)$4
endsnippet

priority 0

snippet pp "fmt.Println name, type, value" w
fmt.Println("var $1 %T = %v\n", ${1:x}, $1)
endsnippet

# ||
# || Bits & pieces
# ||

snippet /^(\s)+;/ "double-edged :=" r
`!p
if match.group(1) is not None:
    snip.rv = match.group(1)`$1 := $2
endsnippet

priority -1

snippet ; ":=" w
:= 
endsnippet

priority 0

snippet / "//" b
// $0
endsnippet

# ||
# || Fallbacks
# ||

priority -4

snippet  /([\!:\w=-]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`($1)
endsnippet
