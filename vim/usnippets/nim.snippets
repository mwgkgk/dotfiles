# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
# `date-utc`

${VISUAL}${0}
endsnippet

snippet dd "dd" w
`!v system('date-jiv | tr -d "\n"')`${0}
endsnippet

# ||
# || Comments
# ||

snippet # "comment" w
# ${VISUAL}$0
endsnippet

snippet ; "comment-generic" w
# ${VISUAL}$0
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
#[
${VISUAL}$0
]#
endsnippet

# ||
# || Modules
# ||

snippet i "i" b
import ${1:os}
endsnippet

snippet /\b(ifm|ifmain)/ "ifm" br
when isMainModule:
	${1:main()}
endsnippet

# ||
# || Functions
# ||

snippet f "f" b
proc ${1:parseArgs}(${4:${2:args}: ${3:varargs[String]}}) =
	${VISUAL}$0
endsnippet

snippet /^p/ "proc" br
proc ${1:main}() =
	${VISUAL}$0
endsnippet

snippet ff "f" b
func ${1:parseArgs}(${4:${2:args}: ${3:varargs[String]}}) =
	${VISUAL}$0
endsnippet

# ||
# || Printing
# ||

snippet e "echo" b
echo ${0:"${VISUAL}$1"}
endsnippet

snippet e "e" b
stderr.writeLine ${0:"${VISUAL}$1"}
endsnippet

# ||
# || Conditionals
# ||

snippet if "if" b
if ${2:${1:name} == ""}:
	${VISUAL}$0
endsnippet

snippet ife "ife" b
if ${2:${1:name} == ""}:
	${VISUAL}$3
else:
	$0
endsnippet

snippet el "el" b
else:
	${VISUAL}$0
endsnippet

snippet eli "eli" b
elif ${2:${1:name} == ""}:
	${VISUAL}$0
endsnippet

snippet case "case" b
case ${1:name}
of ${2:""}:
	$3
else:
	$0
endsnippet

# ||
# || Errors
# ||

snippet try "try" b
try:
	$1
except ${1:OSError}:
	$0
endsnippet
