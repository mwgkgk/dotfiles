extends words.mj
extends condition-system.lisp
extends pidgin.lisp

# ||
# || Date
# ||

snippet /^ *da(te)?/ "Date" rb
;;; `date-utc`
${0}
endsnippet

snippet da "date-file-start" "snip.line == 0" e
;;; `date-utc`

$0
endsnippet

priority -1

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

priority 0

snippet dad "date-intro-comment" w
;;;; `date-utc`
;;;; $0
endsnippet

snippet ins "insert" w
;;; INSERT `date-jiv`

${VISUAL}$0

;;; CONTINUE
endsnippet

# ||
# || Comments
# ||

global !p
import subprocess
endglobal

# PepeHands
# 2021-02-13/04:03:56 changed back to pure dd. used to be implicit whitespace
# as well:
#   snippet /^(\s+)(dd)?/ ";;" r
# In it's implicit form it had the old bug of whitespace-not-expanding at the
# end of the snippets. Didn't occur on dd<Tab>.
snippet /^(\s+)dd/ "dd" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; `!v system('date-jiv | tr -d "\n"')`
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${1:${VISUAL}}$0
endsnippet

snippet ddd "ddd" b
;;; `!v system('date-jiv | tr -d "\n"')`
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);?;/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^dd/ "dd-comment" r
;;; `!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

snippet /^\*/ "section-*" r
;;; *
;;; * ${VISUAL}$0
;;; *
endsnippet

snippet /^(T|;t)$/ "TODO" r
;;; TODO ${VISUAL}$0
endsnippet

snippet /^(\s+)tbd?/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; TBD ${VISUAL}$0
endsnippet

snippet /^tbd?/ ";;;" r
;;; TBD ${VISUAL}$0
endsnippet

snippet /^(\s+)(T|;t)$/ "TODO-indented" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; TODO ${VISUAL}$0
endsnippet

# ||
# || Strings
# ||

snippet p "path" w
#p"`!p
if not snip.v.text:
	snip.rv = "~/"`$0"
endsnippet

snippet ~ "~" w
#p"~/${VISUAL}$0"
endsnippet

# ||
# || Streams
# ||

snippet "(\()?\bwots" "with-output-to-string" rw
(with-output-to-string (${1:out})
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bwifs" "with-input-from-string" rw
(with-input-from-string (${1:s} ${2:"string"})
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bwof" "with-open-file" rw
(with-open-file (${1:f} ${2:"~/path"} :direction :${3:in}put)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bwf" "with-open-file output" rw
(with-open-file (${1:f} ${2:"~/path"} :direction :output :if-does-not-exist :create :if-exists :append)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\brf" "with-open-file input" rw
(with-open-file (${1:f} ${2:"~/path"} :direction :input)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Imports & Packages
# ||

snippet dp "date, defpackage, in-package" w
;;; `date-utc`

(defpackage #:${VISUAL}${1:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}
	(:use #:cl #:serapeum$0))

(in-package #:${VISUAL}$1)
endsnippet

snippet dip "fast date, defpackage, in-package" w
;;; `date-utc`

(defpackage #:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`
	(:use #:cl #:serapeum))

(in-package #:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`)

$0
endsnippet

snippet "(\()?\b(defpackage|defpkg|defpac|pac|pkg)" "defpackage" rw
(defpackage #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}
	(:use #:cl #:serapeum)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bexp" "exp" rw
(:export #:${0:init}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bmk?p" "make-package" rw
(make-package '#:${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(in-p|in|ip)" "in-package" rw
(in-package #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ipclu "in-package cl-user" w
(common-lisp:in-package #:common-lisp-user)
endsnippet

snippet up "use-package" w
(use-package '(#:$0))
endsnippet

snippet ulp "unlock-package" w
#+sbcl
(sb-ext:unlock-package (find-package "CL"))
endsnippet

snippet di "date, in-package" w
;;; `date-utc`

(in-package #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`})
endsnippet

snippet "^(\()?\brq" "require" rw
(require ${1:"asdf"}`!p
if match.group(1) is None:
	snip.rv = ")"`$0
endsnippet

snippet "(\()?\bshad(ow)?" "shadow" rw
(shadow '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bshadowing-import" "shadowing-import" rw
(shadowing-import '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bexport" "export" rw
(export '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet top "top" w
(eval-when (:compile-toplevel :load-toplevel :execute)
	${VISUAL}$0)
endsnippet

snippet /\b(ql|i)/ "quickload" br
(ql:quickload '(#:${1:1am}))
endsnippet

snippet qup "qup" w
(ql:update-dist "quicklisp")
endsnippet

snippet dos "dos" w
(do-external-symbols (s (find-package "${0:QS}"))
	(describe s))
endsnippet

snippet defsys "defsystem" b
(defsystem "${1:school}"
  :version "0.1.0"
  :depends-on (#:${2:find-port})

  :in-order-to ((test-op (test-op "$1-test")))

  :build-operation program-op
  :build-pathname "target/release/$1"
  :entry-point "$1::run"

  :components ((:module "src"
                :serial t 
                :components
                ((:file "package")
                 (:file "$1")))))

(defsystem "$1/debug"
  :version "0.1.0"
  :depends-on (#:${2:find-port})

  :in-order-to ((test-op (test-op "$1-test")))

  :build-operation program-op
  :build-pathname "target/debug/$1"
  :entry-point "$1::run"

  :components ((:module "src"
                :serial t 
                :components
                ((:file "package")
                 (:file "$1")))))
endsnippet

snippet dep ":depends-on" w
:depends-on (#:${2:alexandria})
endsnippet

# ||
# || Variables
# ||

snippet "(\()?\b(defparameter|defparam|defpar|defp|par)" "defparameter" rw
(defparameter $1 ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(defvar|defv|var)" "defvar" rw
(defvar *$1* ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# Normie variant: (defconstant +$1+ ${0:nil}`!p
snippet "(\()?\bdefc" "defconstant" rw
(defconstant $1 ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "^(\()?\bdaf" "date+defun" rb
;;; `date-utc`

(defun ${1:${VISUAL}} ($2)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "^(\()?\b(defun|defu|f)" "defun" rb
(defun ${1:${VISUAL}} ($2)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "^(\()?\b(td)" "tbd defun" wr
(defun ${1:function-name} ($2)
	;; TBD ${VISUAL}$0
	nil`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority -1

snippet "(\()?\b(defun|defu)" "inline defun" rw
(defun ${1:${VISUAL}} ($2)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority 0

snippet /\b&?re/ "&rest" rw
&rest 
endsnippet

snippet /\b&?body/ "&body" rw
&body 
endsnippet

snippet /\b&?opt/ "&optional" wr
&optional 
endsnippet

snippet /\b&?key/ "&key" wr
&key 
endsnippet

snippet "(\()?\b(values|val|v)" "values" rw
(values ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet run "run" b
(defun run ()
	${1:nil})

#+#:comment
(progn
	(run$0))
endsnippet

snippet decl "decl " w
(declare (ignore ${0:args}))
endsnippet

snippet "(\()?\bfmk" "fmk" rw
(fmakunbound '${0:name}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet /(\()?\b(lambda|lambd|lamb|lam|l)/ "lambda" r
(lambda ($1) ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet /(\()?\b(L)/ "#'lambda" r
#'(lambda ($1) ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# It's often used in cond clauses where we need the double opening parens,
# hence not the usual lisp-snippet thing.
snippet "\b(null|n)" "null" rw
(null ${0:${VISUAL}})
endsnippet

snippet "\bnn" "null cond clause" rw
((null ${1:list}) ${0:nil})
endsnippet

snippet "(\()?\bcar" "car" rw
(car ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcdr" "cdr" rw
(cdr ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority -1

snippet "(\()?\bfi?(rst)?" "first" rw
(first ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

priority 0

snippet "(\()?\br(est)?" "rest" rw
(rest ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?\bwhen" "when" rw
(when $1
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
#+#:comment
(when nil  ; `!v system('date-jiv | tr -d "\n"')`
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil)
endsnippet

snippet /^e/ "basement-test" r
#+#:comment
(progn
	(e ${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = "nil"`}))
endsnippet

snippet dab "dated-basement" b
;;; `date-utc` ;;;

#+#:comment
(when nil
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil) ; `!v system('date-jiv | tr -d "\n"')`
endsnippet

# ||
# || Types
# ||

snippet "^(\()?\b(deftype|defty|deft|ty)" "deftype" rb
(deftype $1 ()
	\`${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bct" "check-type" rw
(check-type ${0:${VISUAL}}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bctl" "check-type list" rw
(check-type ${0:${VISUAL}} list`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcti" "check-type integer" rw
(check-type ${0:${VISUAL}} integer`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bctp" "check-type positive integer" rw
(check-type ${0:${VISUAL}} (integer 0 *)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bctf" "check-type function" rw
(check-type ${0:${VISUAL}} function`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcts" "check-type string" rw
(check-type ${0:${VISUAL}} string`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(cs|ctsa)" "check-type satisfies" rw
(check-type ${1:${VISUAL}} (satisfies $0)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bsat" "satisfies" rw
(satisfies ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bass" "assert" rw
(assert ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Classes
# ||

snippet /\b(defclass|defclas|defcla|defcl|class|clas|cla|cl|c)/ "defcl" br
(defclass ${1:obj} ($2)
  (${0:slot}))
endsnippet

snippet "(\()?\bmi" "make-instance" rw
(make-instance '${0:obj}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Slots
# ||

snippet :ac ":ac" w
:accessor $1
endsnippet

snippet :acc ":acc" w
:accessor $1 :initarg :$1
endsnippet

snippet doc "slot :documentation" w
:documentation "${VISUAL}$0"
endsnippet

snippet "(\()?\bsv" "slot-value" rw
(slot-value ${1:obj} ${0:slot}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Methods
# ||

snippet "(\()?\b(defmethod|defmeth|defmet|defm|mtd|me|m)" "defmethod" rw
(defmethod ${1:method} ($2)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ar ":around" w
:around
endsnippet

# ||
# || Alist, Plist
# ||

snippet "(\()?\b(assoc|asc)" "assoc" rw
(assoc ${1:key} ${0:alist}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bgetf" "getf" rw
(getf ${1:plist} ${2:key}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bget" "get" rw
(get ${1:symbol} ${2:indicator}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# Might as well have setf
snippet "(\()?\bsetf" "setf" rw
(setf ${1:place} ${0:value}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bsetq" "setq" rw
(setq ${1:symbol} ${0:value}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bset" "set" rw
(set ${1:'symbol} ${0:value}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Errors
# ||

snippet "(\()?\bhc" "handler-case" rw
(handler-case ${VISUAL}$1
	(error (c)
		${0:nil})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bhb" "handler-bind" rw
(handler-bind ${VISUAL}$1
	(($2))
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(unw|uwp)" "unwind-protect" rw
(unwind-protect ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Structs
# ||

snippet "(\()?\b(struct|st|s)" "struct" rw
(defstruct ${1:struct}
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Arrays
# ||

snippet "(\()?\b(arr|marr|mar|ma)" "make-array" rw
(make-array ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Hashtables
# ||

snippet mkh "(make-hash-table)" w
(make-hash-table${VISUAL}$0)
endsnippet

snippet "(\()?\bgh" "gethash" rw
(gethash ${1:key} ${0:hash}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Readtable
# ||

snippet "(\()?\b(readc|rc)" "readtable-case" rw
(readtable-case ${0:*readtable*}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Macros
# ||

snippet "(\()?\b(defmacro|defmac|defma|dm|macro|macr|mac|ma)" "m" rw
(defmacro ${1:macro} (${2:&body ${3:body}})
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet gs "gs" w
(gensym)
endsnippet

snippet "(\()?\bdefdef" "defdef" rw
(defmacro def${1:something} (name$0)
  `(car (push (make-instance '$1 :name ,name)
         *$1-list*)))

(defdef ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Cond Macro
# ||

snippet "(\()?\bcond" "cond" r
(cond
	($0${VISUAL})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Case Macro
# ||

snippet "(\()?\bcase" "case" rw
(case $1
	($2)
	(otherwise ${0:nil})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bctc" "ctypecase" rw
(ctypecase $1
	($0)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Let, Flet, Labels
# ||

snippet "(\()?\blet" "let" wr
(let (($1))
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\blet\*" "let*" wr
(let* (($1))
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bflet|letf" "flet" wr
(flet ((${1:x} ($2)
				${3:nil}))
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(labels|lab|la)" "labels" wr
(labels ((${1:x} ($2)
					${3:nil}))
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(mvb|bind|mul)" "multiple-value-bind" wr
(multiple-value-bind ($1)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet mvbd "multiple value bind date" w
(multiple-value-bind (sec min hr day mon yr dow dst-p tz)
	(get-decoded-time)
	(declare (ignore sec min hr day mon yr dow dst-p tz))
	${VISUAL}$0)
endsnippet

# ||
# || Do
# ||

snippet "(\()?\bdo" "do" rw
(do ((${1:x} ${2:0} (${3:1+ x})))
	(${4:end-condition} ${5:optional-exit-form})
  ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(dolist|dol|dl)" "dolist" rw
(dolist ($1)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(dotimes|dot|dt)" "dotimes" rw
(dotimes ($1)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Loop Facility
# ||

snippet "(\()?\blo(op)?" "loop" wr
(loop ${VISUAL}$0$1`!p if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet for "Loop for" w
for ${1:item} in ${0:items}
endsnippet

snippet /:?col(lect)?/ "Loop collect" rw
collect ${VISUAL}$0
endsnippet

snippet /:?fin(ally)?/ "Loop finally" rw
finally (return ${0:($1)})
endsnippet

# ||
# || Higher Order Functions
# ||

snippet "(\()?\bfc" "funcall" wr
(funcall $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bap" "apply" wr
(apply $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bri" "remove-if" rw
(remove-if ${1:#'nullp} ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(rin|filter)" "remove-if-not" rw
(remove-if-not ${1:#'nullp} ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Predicates
# ||

# eq is not a good trigger
# snippet "(\()?\beq" "equal" wr
# (equal $0`!p
# if match.group(1) is None:
# 	snip.rv = ")"`
# endsnippet

snippet "(\()?\bep" "equalp" wr
(equalp $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Format
# ||

snippet "(\()?\b(format|fmt)" "format" wr
(format ${1:nil} "$0"`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# Python's \b fucks with dashes yikes.
# snippet p "print" w
# (format ${1:t} "${0:~A}~%" ${2:${VISUAL}})
# endsnippet

snippet "(\()?\bpp" "debug-print" rw
(format t "~A~%" ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet { "{" i
~{${0:~A${VISUAL}}~}
endsnippet

snippet [ "[" i
~[${0:~A${VISUAL}}~]
endsnippet

snippet ( "(" i
~(${0:~A${VISUAL}}~)
endsnippet

snippet a "~A" w
~A
endsnippet

snippet aa "~:*~A" w
~:*~A
endsnippet

snippet b "~%" w
~%
endsnippet

snippet ab "~A~%" w
~A~%
endsnippet

snippet terpri "terpri" w
(terpri)
endsnippet

snippet puo "print-object print-unreadable-object" w
(defmethod print-object ((obj ${0:mylilobjeyboy}) out)
	(print-unreadable-object (obj out :type t)
		(format out "~s" (name obj))))
endsnippet

# ||
# || Quotes
# ||

snippet ' "'" w
'(${VISUAL}$0)
endsnippet

snippet ` "`" w
\`(${VISUAL}$0)
endsnippet

# ||
# || Bits and Pieces
# ||

snippet u "uninterned-symbol" w
#:${VISUAL}$0
endsnippet

snippet nil "#+#:nil" w
#+#:${0:nil}
endsnippet

snippet uc "Under Construction" w
#+#:UC
endsnippet

priority -1

# this one gets to be prioritied down because # in #: is apparently not a word
# symbol 
snippet : "#:" w
#:${0:${VISUAL}}
endsnippet

priority 0

snippet #: "#+#:" w
#+#:${0:${VISUAL}}
endsnippet

snippet #+#:nil "#+#:nil continued" b
#+#:nil
($0)
endsnippet

snippet ecl "ecl" w
#+ecl
endsnippet

snippet sbcl "sbcl" w
#+sbcl
endsnippet

snippet ccl "ccl" w
#+ccl
endsnippet

snippet clisp "clisp" w
#+clisp
endsnippet

snippet abcl "abcl" w
#+abcl
endsnippet

snippet # "#'" w
#'
endsnippet

snippet im "doing my part" b
"I'm doing my part!"
endsnippet

# ||
# || Tests
# ||

# no t cause cond
snippet "(\()?\b(test)" "fiveam test" rw
(test ${1:story-unfolds-as-expected}
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Unix
# ||

snippet "(\()?\b(pwd|cwd)" "(pwd|cwd)" rw
(uiop/os:getcwd$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcd" "cd-posix" rw
(uiop:chdir #P"~/$0"`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bjoin" "join" rw
(merge-pathnames ${VISUAL}$0`!p if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bhere" "here" rw
(merge-pathnames ${VISUAL}$0 (uiop/os:getcwd)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcdl" "cd-load" rw
(let ((*default-pathname-defaults* #P"~/$1"))
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(rp|sh)" "run-program" rw
(uiop:run-program ${VISUAL}$0 :output :interactive`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Exercism
# ||

snippet runt "run-tests" w
#+#:comment
(progn
	(load "`!v expand("%:t:r")`-test")
	(`!v expand("%:t:r")`-test:run-tests))
endsnippet

# ||
# || Expand whitespace
# ||

# Implicit e:
# Converted to double-stage because of line-end whitespace indent cursor bug
# snippet /^(\s+)/ "expand-whitespace" r
# `!p
# if match.group(1) is not None:
#     snip.rv = match.group(1)`e$0
# endsnippet

# ||
# || Fallbacks
# ||

priority -1

snippet /([%\!:\w=\-\+\|><\*\/\?\.]+)_/ "expand-any-word-as-no-arguments-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`)$0
endsnippet

# This is only relevant at top-level, where otherwise it'd default to a new
# defun.
snippet /([%\!:\w=\-\+\|><\*\/\?\.]+)\+/ "expand-any-word-as-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` $0)
endsnippet

snippet  /([%\!:\w=\-\+\|><\*\/\?\.]+):/ "expand-any-word-as-keyword" rw
:`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /([%\!:\w=\-\+\|><\*\/\?\.]+)'/ "expand-any-word-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s%\!:\w=\-\+\|><\*\/\?\.]+\))'/ "expand-any-form-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

priority 0

snippet (' "expand (' as '(" w
'(
endsnippet

priority -1

snippet  /([%\!:\w=\-\+\|><\*\/\?\.]+)(#'|'#)/ "expand-any-word-as-sharp-quote" rw
#'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s%\!:\w=\-\+\|><\*\/\?\.]+\))(#'|'#)/ "expand-any-form-as-sharp-quote" rw
#'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /([%\!:\w=\-\+\|><\*\/\?\.]+)\$/ "expand-any-word-as-let" rw
(let
	((`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ${1:nil})$2)
	${0:nil})
endsnippet

snippet /^(\*[%\!:\w=\-\+\|><\*\/\?\.]+)/ "expand-defparameter-b" br
(defparameter `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` ${0:nil})
endsnippet

priority -2

# snippet /^([%\!:\w=\-\+\|><\*\/\?\.]+)/ "expand-any-word-b" br
# (defun `!p
# if match.group(0) is not None:
# 	snip.rv = match.group(0)` ($1)
# 	${0:nil})
# endsnippet

priority -3

snippet  /([%\!:\w=\-\+\|><\*\/\?\.]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

# priority -4

# Temp disable: fucks with opt/re/key snippets within defun, big hmm
#snippet  /(\(([%\!:\w=\-\+><\*\/\?\.\s\(\)]+)+\))/ "expand-any-form" rw
#(`!p
#if match.group(0) is not None:
#	snip.rv = match.group(0)` $0)
#endsnippet

priority 0
