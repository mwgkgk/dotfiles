# TODO: handle the beginning-of-line whitespace and brackets as match group

snippet "^(\()?rq" "require" r
(require ${1:"asdf"}`!p
if match.group(1) is None:
	snip.rv = ")"`$2
endsnippet

snippet defp "defp" b
(defparameter *$1*
	${2:nil})
endsnippet

snippet "^(\()?f" "f" r
(defun ${1:name} ($2)
	${3:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ba "basement" b
#+nil
(progn
	${VISUAL}${1:nil})
endsnippet

snippet "(\()?cond" "cond" r
(cond
	((${1:equal x y}) ${2:nil})$3`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet cc "cond clause" i
((${1:equal x y}) $2)$3
endsnippet

snippet "(\()?let" "let" r
(let
	((${1:x} ${3:($2)})$4)
	${5:$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?fle" "flet" r
(flet
	((${1:x} ($2)
		${3:nil})$4)
	${5:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet lc "let clause" i
(${1:x} ($2))$3
endsnippet

snippet "(\()?eq" "equal" r
(equal $1`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?fmt" "format" r
(format ${3:nil} "$1"$2`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?lo" "loop" r
(loop
	${2::for }$1`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet for "Loop for" b
:for ${1:x} ${2::across} ${3:str}
endsnippet

snippet col "Loop collect" b
:collect $1
endsnippet

snippet /:?fin(ally)?/ "Loop finally" rb
:finally (return ${2:($1)})
endsnippet

snippet / *d(a)?(te)?/ "Date" rb
;;; `date-utc` ;;;
${0}
endsnippet

snippet { "{" i
~{${0:~a${VISUAL}}~}
endsnippet

snippet [ "[" i
~[${0:~a${VISUAL}}~]
endsnippet

snippet ( "(" i
~(${0:~a${VISUAL}}~)
endsnippet
