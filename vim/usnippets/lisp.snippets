extends words.mj

# ||
# || Date
# ||

snippet / *da(te)?/ "date-file-start" "snip.line == 0" e
;;; `date-utc`

$0
endsnippet

priority -1

snippet / *da(te)?/ "Date" rb
;;; `date-utc`
${0}
endsnippet

snippet dd "dd-line-start" b
// `date-jiv`
endsnippet

priority 0

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')`${0}
endsnippet

# ||
# || Comments
# ||

global !p
import subprocess
endglobal

# PepeHands
# 2021-02-13/04:03:56 changed back to pure dd. used to be implicit whitespace
# as well:
#   snippet /^(\s+)(dd)?/ ";;" r
# In it's implicit form it had the old bug of whitespace-not-expanding at the
# end of the snippets. Didn't occur on dd<Tab>.
snippet /^(\s+)dd/ "dd" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; `!v system('date-jiv | tr -d "\n"')`
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${1:${VISUAL}}$0
endsnippet

snippet ddd "ddd" b
;;; `!v system('date-jiv | tr -d "\n"')`
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);?;/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^dd/ "dd-comment" r
;;; `!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

snippet /^\*/ "section-*" r
;;; *
;;; * ${VISUAL}$0
;;; *
endsnippet

snippet /^T$/ "TODO" r
;;; TODO ${VISUAL}$0
endsnippet
snippet /^(\s+)T$/ "TODO-indented" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; TODO ${VISUAL}$0
endsnippet

# ||
# || Strings
# ||

snippet p "path" w
#p"`!p
if not snip.v.text:
	snip.rv = "~/"`$0"
endsnippet

# ||
# || Imports & Packages
# ||

snippet pkg "date, defpackage, in-package" w
;;; `date-utc`

(defpackage #:${VISUAL}${1:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}
	(:use #:cl$0))

(in-package #:${VISUAL}$1)
endsnippet

snippet dip "fast date, defpackage, in-package" w
;;; `date-utc`

(defpackage #:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`
	(:use #:cl))

(in-package #:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`)

$0
endsnippet

snippet "(\()?\b(defpackage|defpac|defp)" "defpackage" rw
(defpackage #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}
	(:use #:cl)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bmk?p" "make-package" rw
(make-package '#:${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bin?\-?p?" "in-package" rw
(in-package #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet di "date, in-package" w
;;; `date-utc`

(in-package #:${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = os.path.splitext(fn)[0]
`})
endsnippet

snippet "^(\()?\brq" "require" rw
(require ${1:"asdf"}`!p
if match.group(1) is None:
	snip.rv = ")"`$0
endsnippet

snippet "(\()?\bshad(ow)?" "shadow" rw
(shadow '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bshadowing-import" "shadowing-import" rw
(shadowing-import '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bexport" "export" rw
(export '${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ql "quickload" b
(ql:quickload '(#:${1:1am}))
endsnippet

snippet defsys "defsystem" b
(defsystem "${1:school}"
  :version "0.1.0"
  :depends-on (#:${2:find-port})

  :in-order-to ((test-op (test-op "$1-test")))

  :build-operation program-op
  :build-pathname "target/release/$1"
  :entry-point "$1::run"

  :components ((:module "src"
                :serial t 
                :components
                ((:file "package")
                 (:file "$1")))))

(defsystem "$1/debug"
  :version "0.1.0"
  :depends-on (#:${2:find-port})

  :in-order-to ((test-op (test-op "$1-test")))

  :build-operation program-op
  :build-pathname "target/debug/$1"
  :entry-point "$1::run"

  :components ((:module "src"
                :serial t 
                :components
                ((:file "package")
                 (:file "$1")))))
endsnippet

# ||
# || Variables
# ||

snippet "(\()?\b(defparameter|defparam|defpar|d)" "defparameter" rw
(defparameter *$1*
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(defvar|defv|var)" "defvar" rw
(defvar *$1*
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bdefc" "defconstant" rw
(defconstant +$1+
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "(\()?\b(defun|defu|f)" "defun" rw
(defun ${1:function-name} ($2)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet /\b&?re/ "&rest" rw
&rest 
endsnippet

snippet /\b&?body/ "&body" rw
&body 
endsnippet

snippet /\b&?opt/ "&optional" wr
&optional 
endsnippet

snippet /\b&?key/ "&key" wr
&key 
endsnippet

snippet "(\()?\b(values|val|v)" "values" rw
(values ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet run "run" b
(defun run ()
	${1:nil})

#+#:comment
(progn
	(run$0))
endsnippet

snippet decl "decl " w
(declare (ignore ${0:args}))
endsnippet

snippet "(\()?\bfmk" "fmk" rw
(fmakunbound '${0:name}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet /(\()?\b(lambda|lambd|lamb|lam|la|l)/ "lambda" r
(lambda ($1) ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet /(\()?\b(l#|#l)/ "#'lambda" r
#'(lambda ($1) ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(null|n)" "null" rw
(null ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcar" "car" rw
(car ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcdr" "cdr" rw
(cdr ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bfirst" "first" rw
(first ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\brest" "rest" rw
(rest ${0:list}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
#+#:comment
(when nil  ; `!v system('date-jiv | tr -d "\n"')`
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil)
endsnippet

snippet /^e/ "basement-test" r
#+#:comment
(progn
	(e ${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = "nil"`}))
endsnippet

snippet dab "dated-basement" b
;;; `date-utc` ;;;

#+#:comment
(when nil
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil) ; `!v system('date-jiv | tr -d "\n"')`
endsnippet

# ||
# || Types
# ||

snippet "(\()?\bt" "deftype" rw
(deftype $1 (${2:&optional ${3:type}})
	\`${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Classes
# ||

snippet /\b(defclass|defclas|defcla|defcl|class|clas|cla|c)/ "defcl" wr
(defclass ${1:object} ($2)
  (${0:slot}))
endsnippet

snippet "(\()?\bmi" "make-instance" rw
(make-instance '${0:object}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Methods
# ||

snippet "(\()?\b(defmethod|defmet|defm|me|m)" "defmethod" rw
(defmethod ${1:method} ($2)
	${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ar ":around" w
:around
endsnippet

# ||
# || Errors
# ||

snippet "(\()?\bhc" "handler-case" rw
(handler-case ${VISUAL}$1
	(error (c)
		${0:nil})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bhb" "handler-bind" rw
(handler-bind ${VISUAL}$1
	(($2))
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Structs
# ||

snippet "(\()?\bs" "struct" rw
(defstruct ${1:struct}
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Arrays
# ||

snippet "(\()?\b(arr|marr|mar|ma)" "make-array" rw
(make-array ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Readtable
# ||

snippet "(\()?\b(readc|rc)" "readtable-case" rw
(readtable-case ${0:*readtable*}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Macros
# ||

snippet "(\()?\b(defmacro|defmac|defma|dm|macro|macr|mac)" "m" rw
(defmacro ${1:macro} (${2:&body ${3:body}})
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bdo" "do" rw
(do ((${1:x} ${2:0} (${3:1+ x})))
	(${4:end-condition} ${5:optional-exit-form})
  ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Cond Macro
# ||

snippet "(\()?\bcond" "cond" r
(cond
	($0${VISUAL})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Case Macro
# ||

snippet "(\()?\bcs" "case" rw
(case $1
	($2)
	(otherwise ${0:nil})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bctc" "ctypecase" rw
(ctypecase $1
	($0)`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Let, Flet, Labels
# ||

snippet "(\()?\blet" "let" wr
(let
	(($1 ${3:(${2:${VISUAL}})})$4)
	${0:$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bflet|letf" "flet" wr
(flet
	((${1:x} ($2)
		${3:nil})$4)
	$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(labels|lab)" "labels" wr
(labels
	((${1:x} ($2)
		${3:nil})$4)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\b(mvb|bind|mul)" "multiple-value-bind" wr
(multiple-value-bind ($1)
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Format
# ||

snippet "(\()?\b(format|fmt)" "format" wr
(format ${1:nil} "$0"`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# Python's \b fucks with dashes yikes.
# snippet p "print" w
# (format ${1:t} "${0:~A}~%" ${2:${VISUAL}})
# endsnippet

snippet "(\()?\bpp" "debug-print" rw
(format t "~A~%" ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet { "{" i
~{${0:~A${VISUAL}}~}
endsnippet

snippet [ "[" i
~[${0:~A${VISUAL}}~]
endsnippet

snippet ( "(" i
~(${0:~A${VISUAL}}~)
endsnippet

# ||
# || Loop Facility
# ||

snippet "(\()?\blo(op)?" "loop" wr
(loop
	${0::for }$1`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet for "Loop for" w
:for ${1:x} ${2::across} ${0:str}
endsnippet

snippet /:?col(lect)?/ "Loop collect" rw
:collect ${VISUAL}$0
endsnippet

snippet /:?fin(ally)?/ "Loop finally" rw
:finally (return ${0:($1)})
endsnippet

# ||
# || Higher Order Functions
# ||

snippet "(\()?\bfc" "funcall" wr
(funcall $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bri" "remove-if" rw
(remove-if ${1:#'nullp} ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\brin" "remove-if-not" rw
(remove-if-not ${1:#'nullp} ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Predicates
# ||

snippet "(\()?\beq" "equal" wr
(equal $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bep" "equalp" wr
(equalp $0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Quotes
# ||

snippet ' "'" w
'(${VISUAL}$0)
endsnippet

snippet ` "`" w
\`(${VISUAL}$0)
endsnippet

# ||
# || Bits and Pieces
# ||

snippet u "uninterned-symbol" w
#:${VISUAL}$0
endsnippet

snippet nil "#+#:nil" w
#+#:${0:nil}
endsnippet

snippet #+#:nil "#+#:nil continued" b
#+#:nil
($0)
endsnippet

snippet im "doing my part" b
"I'm doing my part!"
endsnippet

# ||
# || 1am
# ||

snippet ro "rooftops" b
#+#:comment
(progn
	(1am:test ${1:test-name}
		(is ${0:nil})})
	(1am:run '($1)))
endsnippet

# ||
# || Unix
# ||

snippet "(\()?\b(pwd|cwd)" "(pwd|cwd)" rw
(sb-posix:getcwd$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcdp" "cd-posix" rw
(sb-posix:chdir #P"~/$0"`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcd" "cd-load" rw
(setf *default-pathname-defaults* #P"~/$0"`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Jiv
# ||

# Jiv-within-CL, because it sometimes be like that

snippet j "jiv" b
#+J
($0)
endsnippet

snippet dj "dj" b
;;; `date-utc` ;;;

#+J
($0)
endsnippet

snippet at "at" b
#J
(at `date-jiv`
		${0})
endsnippet

snippet q "question" b
(question
  "$1"
  $2)
endsnippet

# ||
# || Exercism
# ||

snippet runt "run-tests" w
#+#:comment
(progn
	(load "`!v expand("%:t:r")`-test")
	(`!v expand("%:t:r")`-test:run-tests))
endsnippet

# ||
# || Expand whitespace
# ||

# Implicit e:
# Converted to double-stage because of line-end whitespace indent cursor bug
# snippet /^(\s+)/ "expand-whitespace" r
# `!p
# if match.group(1) is not None:
#     snip.rv = match.group(1)`e$0
# endsnippet

# ||
# || Fallbacks
# ||

priority -1

snippet /([%\!:\w=\-\+><\*\/\?\.]+)_/ "expand-any-word-as-no-arguments-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`)$0
endsnippet

# This is only relevant at top-level, where otherwise it'd default to a new
# defun.
snippet /([%\!:\w=\-\+><\*\/\?\.]+)\+/ "expand-any-word-as-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` $0)
endsnippet

snippet  /([%\!:\w=\-\+><\*\/\?\.]+):/ "expand-any-word-as-keyword" rw
:`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)'/ "expand-any-word-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s%\!:\w=\-\+><\*\/\?\.]+\))'/ "expand-any-form-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

priority 0

snippet (' "expand (' as '(" w
'(
endsnippet

priority -1

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)(#'|'#)/ "expand-any-word-as-sharp-quote" rw
#'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s%\!:\w=\-\+><\*\/\?\.]+\))(#'|'#)/ "expand-any-form-as-sharp-quote" rw
#'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)\$/ "expand-any-word-as-let" rw
(let
	((`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ${1:nil})$2)
	${0:nil})
endsnippet

priority -2

snippet /^([%\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word-b" br
(defun `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` (${1:list})
	${0:nil})
endsnippet

priority -3

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

# priority -4

# Temp disable: fucks with opt/re/key snippets within defun, big hmm
#snippet  /(\(([%\!:\w=\-\+><\*\/\?\.\s\(\)]+)+\))/ "expand-any-form" rw
#(`!p
#if match.group(0) is not None:
#	snip.rv = match.group(0)` $0)
#endsnippet

priority 0
