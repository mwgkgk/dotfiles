# vim:ft=snippets:

# ||
# || PreProc
# ||

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

snippet i "#include <> (Inc)" b
#include <${1:${2:`!p snip.rv = snip.basename `}.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

# snippet once "Include header once only guard"
# #ifndef ${1:`!p
# if not snip.c:
# 	import random, string
# 	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
# 	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
# 	snip.rv = ('%s_%s' % (name,rand)).upper()
# else:
#     snip.rv = snip.c`}
# #define $1
#
# ${0}
#
# #endif /* end of include guard: $1 */
#
# endsnippet

snippet once "def once simple" b
#ifndef ${1:`!p snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()`_}
#define $1

${0}

#endif  // $1
endsnippet

# ||
# || Types
# ||

snippet int "int" w
int ${VISUAL}$0
endsnippet

snippet void "void" w
void ${VISUAL}$0
endsnippet

# ||
# || Typedef
# ||

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

# ||
# || Enum
# ||

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

# ||
# || Struct
# ||

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet


# ||
# || Function
# ||

snippet f "function" b
${2:int} ${1:name}(${3:const int &${4:a}}) {
	${VISUAL}$0
}
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {

	${VISUAL}$0

	return EXIT_SUCCESS;
}
endsnippet

# ||
# || Return
# ||

snippet r "return" w
return ${0:EXIT_SUCCESS};
endsnippet

snippet r0 "r0" w
return EXIT_SUCCESS;
endsnippet

snippet r1 "r1" w
return EXIT_FAILURE;
endsnippet
# ||
# || If
# ||

snippet if "if .. (if)"
if (${1:argc < ${2:2}}) {
	${VISUAL}${1:fprintf(stderr, "ERROR: You need at least one argument.\n");
	return EXIT_FAILURE;}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
	${2:/* code */}
}
else
{
	${3:/* else */}
}
endsnippet

# ||
# || For
# ||

snippet for "for loop (for)"
for (${4:int }${1:i} = 0; $1 < ${2:count}; ${3:++$1}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

# ||
# || While
# ||

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while(${1:/* condition */});
endsnippet

# ||
# || Print
# ||

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet p "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet echo "echo" b
printf("Hello from $1");
endsnippet

snippet e "e" w
fprintf(stderr, ${2:"${1:ERROR: You need at least one argument.}$\n"}$3);
endsnippet

snippet er "er" w
fprintf(stderr, ${2:"${1:ERROR: You need at least one argument.}$\n"}$3);
exit(EXIT_FAILURE);
endsnippet

# ||
# || System
# ||

snippet sys "sys" w
system($1);
endsnippet

# ||
# || Files
# ||

snippet fo "fopen" b
FILE *${1:fp} = fopen(${3:"${2:data.txt}"}, "${4:r}");
if ($1 == NULL) {
  fprintf(stderr, "fopen(${3/"/\\"/g}), \"$4\" failed in file %s at line # %d",
				__FILE__, __LINE__);
  exit(EXIT_FAILURE);
}

$5

fclose($1);
endsnippet

snippet po "popen" b
FILE *${1:fp} = popen(${3:"${2:ls /}"}, "${4:r}");
if ($1 == NULL) {
  fprintf(stderr, "popen(${3/"/\\"/g}), \"$4\" failed in file %s at line # %d",
				__FILE__, __LINE__);
  exit(EXIT_FAILURE);
}

$5

fclose($1);
endsnippet

# ||
# || Brackets
# ||

snippet { "{" w
{
	${VISUAL}$0
}
endsnippet

# ||
# || Comments
# ||

snippet / *d(a)?(te)?/ "" rb
// `date-utc`${0}
endsnippet

snippet dd "dd-comment" b
// `!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

priority -1

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')` ${VISUAL}$0
endsnippet

priority 0

snippet / "comment-/" w
// ${VISUAL}$0
endsnippet

snippet // "comment-//" w
// ${VISUAL}$0
endsnippet

snippet ; "comment-generic" w
// ${VISUAL}$0
endsnippet

snippet /^(\s*)(// )?(T|td)/ "TODO-comment" r
`!p
# Whitespace:
if match.group(1) is not None:
	snip.rv = match.group(1)`// TODO ${VISUAL}$0
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
/* `!v system('date-jiv | tr -d "\n"')`
${VISUAL}${0}
*/
endsnippet

# ||
# || Fallbacks
# ||

priority -2

# snippet "(\w+)" "dereferencing" irs
# `!p
# if match.group(0) is not None:
#     snip.rv = match.group(0)`->$0
# endsnippet

priority -3

snippet  /^\s+([\!:\w=-]+)$/ "expand-any-word-endline" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`($1);
endsnippet

priority -4

snippet  /([\!:\w=-]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`($1)
endsnippet
