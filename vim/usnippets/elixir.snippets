extends local.elixir

snippet deps "espec" i
${VISUAL}
	{:espec, "~> 1.4.0", only: :test},
	{:true_story, "~> 0.0.1", only: :test},
	{:wallaby, "~> 0.17.0"},
	{:temp, "~> 0.4", only: :test},
	{:poison, "~> 3.1"},
	{:feeder_ex, "~> 1.1.0"},
	{:httpoison, "~> 0.11.1"},
	{:flowex, "0.5.0"},$0

endsnippet

global !p
def unpack_fn(str):
	return (''.join(x.capitalize() for x in str.split('_')).split('.')[0],
			str.split('_')[0])
def mix_project():
	from os.path import exists, join, dirname, abspath
	p = path
	i = 0
	while True:
		mixfile = join(dirname(abspath(p)), "mix.exs")
		if exists(mixfile):
			with open(mixfile) as f:
				return  f.readline().split()[1].split('.')[0]
		i += 1
		if i >= 5 :
			return "Unknown"
		p = dirname(p)
endglobal

snippet doc "doctest" b
@doc ~S"""
	iex> $0
"""
endsnippet

snippet "\sf" "inline function" r
 &(${VISUAL}$1)
endsnippet

snippet do "do..end" i
do
	${VISUAL}$1
end
endsnippet

snippet case "case" b
case $1 do
	$2 ->
		$0
end
endsnippet

snippet cond "cond" b
cond do
	$1 ->
		$0
end
endsnippet

snippet cb "callback" b
@callback ${1:hello}($2) :: ${3:String.t}
endsnippet

snippet d "def" b
def ${1:hello}($2), do: ${3:"hello"}
endsnippet

snippet def "def" b
@spec $1($2) :: ${3:String.t}
def ${1:hello}(${4:$2}) do
	${VISUAL}$0
end
endsnippet

snippet defp "defp" b
@spec $1($2) :: ${3:String.t}
defp ${1:hello}(${4:$2}) do
	${VISUAL}$0
end
endsnippet

snippet defm "defmodule" b
defmodule ${1:Default} do
	${VISUAL}$2
end
endsnippet

snippet defpr "defprotocol" b
defprotocol ${1:Default} do
	${VISUAL}$2
end
endsnippet

snippet /(defimpl|defi)/ "defimpl" br
defimpl ${1:Protocol}, for: ${2:Type} do
	${VISUAL}$0
end
endsnippet

snippet defs "defstruct" b
defstruct ${1:name}: ${2:nil}
endsnippet

snippet vers "vers" b
def version() do
	"${1:0.0.1}"
end
endsnippet

snippet rec "receive" b
receive do
	${VISUAL}$1
end
endsnippet

snippet test "test" b
test "${1:does something}", %{${2:values}: $2} do
	${VISUAL}$3
end
endsnippet

snippet ali "ali" b
alias $1, as: $2
endsnippet

snippet map "map" i
Enum.map(&${VISUAL}$0/1)
endsnippet

# Espec

snippet cont "context" b
context $1do
	${VISUAL}$0
end
endsnippet

snippet it "it multiline" b
it "$1" do
	${VISUAL}$0
end
endsnippet

snippet itd "it" b
it do: should(${0:be_ok_result()})
endsnippet

snippet /(sho|should)/ "should" br
|> should(${0:be_ok_result()})
endsnippet

# Phoenix

snippet scope "phoenix scope" b
scope "/${1:scope}", ${2:Pweb} do
	pipe_through :browser

	get "/", ${3:${1/\w+/\u$0/}}Controller, :index
end
endsnippet

snippet get "phoenix get" b
get "/${1:status}", ${2:Some}Controller, :${3:$1}
endsnippet

snippet act "phoenix action" b
def ${1:status}(conn, _params) do
	render conn, "${2:$1}.html"
end
endsnippet

snippet red "phoenix redirect" b
redirect conn, to: "/$1"
endsnippet

snippet chan "phoenix channel" b
defmodule ${1:`!p snip.rv = mix_project()`}.${2:`!p snip.rv, chan_name = unpack_fn(fn)`} do
	use Phoenix.Channel

	def join("${3:`!p snip.rv = chan_name`}:${4:lobby}", _message, socket) do
		{:ok, socket}
	end
	def join("$3:" <> _private_room_id, _params, _socket) do
		{:error, %{reason: "unauthorized"}}
	end
end
endsnippet

snippet http "http" b
http: [port: {:system, "PORT"}],
endsnippet

# Flowex

snippet pipe "Flowex module pipe" b
defmodule ${1:Inspect}Pipe do
  defstruct ${2:data}: nil$3

  def init(opts), do: opts

  @spec call(%{$2: String.t}, struct) :: String.t
  def call(%{$2: $2}, _opts) do
    IO.inspect $2
    %{$2: $2}
  end
end

endsnippet

# true_story

snippet put "put" b
defp put_${1:something}(c) do
	Map.put c, :$1,
		${2:"peace among worlds"}
end
endsnippet

snippet story "story" b
story "${1:doing something}", c
|> put_${2:something},
	verify do
		assert Map.has_key? c, :$2
	end
endsnippet

snippet true "true" b
defmodule ${1:Project}.Test do
	use ExUnit.Case
	use TrueStory

	story "adding to a map", c
	|> Map.put(:key, :value),
		verify do
			assert c.key == :value
			refute c.key == :not_value
		end
end
endsnippet
