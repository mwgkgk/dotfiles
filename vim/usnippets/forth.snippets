# ||
# || Date
# ||

snippet /^ *d(a)?(te)?/ "Date" rb
\ `date-utc`
$0
endsnippet

# TODO make this implicit on tab
snippet da "implicit-date-file-start" "snip.line == 0" e
\ `date-utc`

$0
endsnippet

# ||
# || Comments
# ||

snippet \ "comment-explicit" w
\ ${VISUAL}$0
endsnippet

priority -1

# See UltiSnips-custom-context-snippets
snippet /^$/ "basement-implicit" "snip.line > 0 and re.match('^$', snip.buffer[snip.line-1])" re
(
${VISUAL}$0
) \ `date-jiv`
endsnippet

priority 0

snippet T "TODO" b
\ TODO ${VISUAL}$0
endsnippet

# ||
# || Files
# ||

snippet i "include" w
include ${VISUAL}$0
endsnippet

# ||
# || Words
# ||

snippet w "word" w
: ${1:word} ${0:${VISUAL}} ;
endsnippet

snippet f "word, ( n -- n ), start with definition" w
: ${1:word} ( ${3:n} -- ${4:n} ) ${2:${VISUAL}} ;
endsnippet

snippet f0 "word, ( -- )" w
: ${1:word} ( ${2:n} -- ) ${0:${VISUAL}} ;
endsnippet

snippet f01 "word, ( -- n )" w
: ${1:word} ( -- ${2:n} ) ${0:${VISUAL}} ;
endsnippet

snippet f1 "word, ( n -- n )" w
: ${1:word} ( ${2:n} -- ${3:n} ) ${0:${VISUAL}} ;
endsnippet

snippet f10 "word, ( n -- )" w
: ${1:word} ( ${2:n} -- ) ${0:${VISUAL}} ;
endsnippet

snippet f12 "word, ( n -- n n )" w
: ${1:word} ( ${2:n} -- ${3:n} ${4:n} ) ${0:${VISUAL}} ;
endsnippet

snippet f2 "word, ( n n -- n )" w
: ${1:word} ( ${2:n} ${3:n} -- ${4:n} ) ${0:${VISUAL}} ;
endsnippet

snippet f20 "word, ( n n -- )" w
: ${1:word} ( ${2:n} ${3:n} -- ) ${0:${VISUAL}} ;
endsnippet

snippet f3 "word, ( n n n -- n )" w
: ${1:word} ( ${2:n} ${3:n} ${4:n} -- ${5:n} ) ${0:${VISUAL}} ;
endsnippet

snippet f30 "word, ( n n n -- )" w
: ${1:word} ( ${2:n} ${3:n} ${4:n} -- ) ${0:${VISUAL}} ;
endsnippet

# Add arity to a word:

snippet /^: ([\!:\w=-?]+) $/ "add-arity-to-word" rb
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`( $1 -- $2 ) $0
endsnippet

# ||
# || Asserts
# ||

snippet a "assert" w
assert( $1 )$0
endsnippet

# ||
# || Stack
# ||

snippet c "clearstack" w
clearstack
endsnippet

snippet cl "clearstack" w
clearstack
endsnippet

# Regex is too fucky
snippet .s  ".s clearstack" w
.s clearstack
endsnippet

# ||
# || Strings
# ||

snippet s "string" w
s" ${VISUAL}$0"
endsnippet

snippet . "printstring" w
." ${VISUAL}$0"
endsnippet

# ||
# || Conditionals
# ||

snippet if "if" w
if
	${0:${VISUAL}}
endif
endsnippet

snippet /ife|ie/ "if else" rw
if
	${1:${VISUAL}}
else
	$0
endif
endsnippet

# ||
# || Loops
# ||

snippet b "begin" w
begin $0
again
endsnippet

# ||
# || Named memory
# ||

snippet var "variable" w
variable $0
endsnippet

# ||
# || Fallbacks
# ||

priority -3

snippet /^([\!:\w=\-?\.$><]+)/ "expand-any-word-b" br
: `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0 ;
endsnippet

# snippet /^([\!:\w=\-?\.$><]+)/ "expand-any-word-b" br
# \ $1 -- $2
# : `!p
# if match.group(0) is not None:
# 	snip.rv = match.group(0)`
# 	$0
# ;
# endsnippet

snippet /^: ([\!:\w=\-?\.$><]+)\s*/ "double-expand-any-word-b" br
: `!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ( $0 )
endsnippet
