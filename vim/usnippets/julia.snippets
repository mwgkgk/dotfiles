# ||
# || Date
# ||

snippet / *d(a)?(te)?/ "Date" rb
## `date-utc` ##

${0}
endsnippet

snippet dd "inline date" w
`!v system('date +"%Y-%m-%d" | tr -d "\n"')`: ${0}
endsnippet

# ||
# || Program
# ||

snippet pf "program file" w
PROGRAM_FILE
endsnippet

# ||
# || Modules
# ||

snippet m "mod" b
module $1

using Test: @test

$2

end
endsnippet

snippet u "using" b
using ${1:Test: @test}$2
endsnippet

# ||
# || Structs
# ||

snippet struct "struct" w
struct $1
end
endsnippet

# ||
# || Functions
# ||

snippet f "f" b
function ${1:f}($2)
	$3
end
endsnippet

snippet comp "comp" w
âˆ˜($1, $2)
endsnippet

# ||
# || Testing
# ||

# If line above is empty, @test:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
@test ${VISUAL}${1:`!p

if not snip.v.text:
	snip.rv = ""
`}
endsnippet

# If line above is @test, @test:
snippet /^$/ "basement-implicit" "re.match('^@test.*', snip.buffer[snip.line-1])" re
@test ${VISUAL}${1:`!p

if not snip.v.text:
	snip.rv = ""
`}
endsnippet

snippet t "testset" b
@testset "${1:Subject}" begin
	$2
end$0
endsnippet

# ||
# || Control flow
# ||

snippet do "do" w
do ${1:element}
	$2
end
endsnippet

snippet if "if" w
if $1
end
endsnippet

snippet for "for" w
for ${1:x} in ${2:ARGS}
	${VISUAL}${3:`!p

if not snip.v.text:
	snip.rv = "0"
`}
end
endsnippet

# ||
# || Printing
# ||

snippet p "println" w
println(${2:"$${1:a"})
endsnippet

# } higlighting bug

# ||
# || Basement
# ||

snippet b "BASEMENT" b
if false
	$1
end
endsnippet

# ||
# || Fallbacks
# ||

priority -3

snippet  /([\!:\w=-]+)/ "expand-any-word" rw
`!p
if match.group(0) is not None:
	snip.rv = match.group(0)`($1)
endsnippet
