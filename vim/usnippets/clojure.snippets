# ||
# || Date
# ||

# Wed Jun 30 08:42:15 UTC 2021

snippet / *d(a)?(te)?/ "Date" rb
;; `date-utc`

${0}
endsnippet

# ||
# || Comments
# ||

snippet /^;?;/ ";;" r
;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`; ${VISUAL}$0
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
(comment
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil) ; `date-jiv`
endsnippet

# ||
# || Modules
# ||

snippet ns "ns" b
(ns $1.`!p
snip.rv = snip.basename`
	$0)
endsnippet

snippet "(\()?:?req" "req" r
(:require ${0:[${4:${1:clojure.core.match} ${3::refer [${2:match}]}}]}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "^(\()?f" "f" r
(defn ${1:fname}
	[$2]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`

#_(do
		($1)${VISUAL})
endsnippet

snippet "^(\()?sf" "fn-spec" r
(defn-spec ${1:fname} ${2:integer?}
	[${3:a integer?}]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`

#_(do
		($1)${VISUAL})
endsnippet

# ||
# || Let
# ||

snippet "(\()?let" "let" r
(let
	[$1]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?if" "if" r
(if ${2:(${1:?})}
	$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Print
# ||

snippet "(\()?p" "println" r
(println ${0:"$1"}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Errors
# ||

snippet "(\()?e" "Error" r
(errexit ${VISUAL}${1:(${0:usage})}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?m" "match" r
(match ${0:${VISUAL}$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Fallbacks
# ||

priority -3

snippet  /([\!:\w=\-\/]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $1)
endsnippet
