snippet / *d(a)?(te)?/ "Date" rb
;; `date-utc` ;;

${0}
endsnippet

snippet "^(\()?f" "f" r
(defn ${1:fname}
	[$2]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`

;; {{{
#_(do
		($1)${VISUAL})
;; }}}
endsnippet

snippet "^(\()?sf" "fn-spec" r
(defn-spec ${1:fname} ${2:integer?}
	[${3:a integer?}]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`

;; {{{
#_(do
		($1)${VISUAL})
;; }}}
endsnippet

snippet ba "basement" b
;; {{{
#_(do
		${VISUAL}${0:nil})
;; }}}
endsnippet

snippet "(\()?if" "if" r
(if ${2:(${1:?})}
	$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?let" "let" r
(let
	[$1]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?p" "println" r
(println ${0:"$1"}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?e" "Error" r
(errexit ${VISUAL}${1:(${0:usage})}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?:?req" "req" r
(:require ${0:[${4:${1:clojure.core.match} ${3::refer [${2:match}]}}]}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?m" "match" r
(match ${0:${VISUAL}$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet ns "ns" b
(ns $1.`!p
snip.rv = snip.basename`
	$0)
endsnippet

snippet leg "league" b
(def league
	{:name "${1:`!p
snip.rv = snip.basename`}"
	$0
	})
endsnippet
