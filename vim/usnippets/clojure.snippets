# ||
# || Date
# ||

# Wed Jun 30 08:42:15 UTC 2021

snippet / *da(te)?/ "Date" rb
;; `date-utc`

${0}
endsnippet

# ||
# || Comments
# ||

snippet /^(\s+)?;?;/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
(comment
	${VISUAL}${0:`!p

if not snip.v.text:
	snip.rv = "nil"
`}
	nil) ; `date-jiv`
endsnippet

# ||
# || Modules
# ||

snippet ns "ns" b
(ns $1.`!p
snip.rv = snip.basename`
	$0)
endsnippet

snippet "(\()?:?req" "req" r
(:require ${0:[${4:${1:clojure.core.match} ${3::refer [${2:match}]}}]}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Values
# ||

snippet "^(\()?(def|d)" "def" r
(def ${1:name} ${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Atoms
# ||

snippet "(\()?\bs" "swap!" rw
(swap! $1 ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Functions
# ||

snippet "^(\()?\b(defn|f)" "f" r
(defn ${1:fname}
	[$2]
	${VISUAL}${0:`!p
if not snip.v.text:
	snip.rv = "nil"`}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "^(\()?\bsf" "fn-spec" r
(defn-spec ${1:fname} ${2:integer?}
	[${3:a integer?}]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`

#_(do
		($1)${VISUAL})
endsnippet

# Tue Jul  6 01:16:59 UTC 2021

snippet # "lambda" w
#(${VISUAL}$0)
endsnippet

snippet k "lambda" w
#(${VISUAL}$0)
endsnippet

# ||
# || Let
# ||

# Note that Python considers - a non-word character, so \b here doesn't prevent
# trigger on something-let<Tab>
snippet "(\()?\blet" "let" r
(let [$1]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# TODO Come up with a smooth mechanic for refactor-to-let
snippet "(\()?\bil" "if-let" r
(if-let [$1]
	${0:nil}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Conditionals
# ||

snippet "(\()?\bif" "if" r
(if ${2:(${1:?})}
	$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Print
# ||

snippet "(\()?\bp" "println" r
(println ${0:"$1"}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Errors
# ||

snippet "(\()?\be" "Error" r
(errexit ${VISUAL}${1:(${0:usage})}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bm" "match" r
(match ${0:${VISUAL}$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Fallbacks
# ||

priority -1

snippet /([%\!:\w=\-\+><\*\/\?\.]*[%\!:\w=\-\+><\*\/\?])\./ "expand-any-word-as-no-arguments-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`)$0
endsnippet

snippet  /([%\!:\w=\-\+><\*\/\?\.]+):/ "expand-any-word-as-keyword" rw
:`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)'/ "expand-any-word-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s%\!:\w=\-\+><\*\/\?\.]+\))'/ "expand-any-form-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

priority 0

snippet (' "expand (' as '(" w
'(
endsnippet

priority -1

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)\$/ "expand-any-word-as-let" rw
(let
	[`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ${1:nil}]
	${0:nil})
endsnippet

priority -2

snippet /^([%\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word-b" br
(defn `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` (${1:list})
	${0:nil})
endsnippet

priority -3

snippet  /([%\!:\w=\-\+><\*\/\?\.]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

priority -4

snippet  /(\(([%\!:\w=\-\+><\*\/\?\.\s\(\)]+)+\))/ "expand-any-form" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet

priority 0
