snippet i "i" b
(use-modules (ice-9 ${1:match}))
endsnippet

snippet /^\s*f/ "f" r
(define (${1:fname-and-args})
	($0))
endsnippet

snippet (f "(p" i
(define (${1:fname-and-args})
	($0)
endsnippet

snippet l "l" b
lambda ()
endsnippet

snippet d "d" b
(define ${1:var} ${2:"val"})
endsnippet

snippet if "if" i
if ($1)
	${2:x}
	${3:y}
endsnippet

snippet /^\s*p/ "p" r
(displayln "${1:Observing behavior.}")
endsnippet

snippet (p "(p" b
(displayln "${1:Observing behavior.}"
endsnippet

snippet /^\s*cond/ "cond2" r
(cond
	[(> 0 (vector-length (current-command-line-arguments) ()]
	[#t ()])
endsnippet

snippet (cond "cond" i
(cond
	[(> 0 (vector-length (current-command-line-arguments) ()]
	[#t ()]
endsnippet

snippet let "let" b
(let
	((${1:x1 e1}))
	(${VISUAL}$2))
endsnippet

snippet (let "let" i
(let ((${1:x1 e1}))
	($2)
endsnippet

snippet /req|r/ "chicken-scheme require-extension" br
(require-extension ${1:shell})
endsnippet

snippet m "m" b
(define-syntax ${1:comment-out}
	(syntax-rules ($2)
		[($3) 
		($4)]))
endsnippet

snippet form "format" i
format ${1:#f} "${2}" $0
endsnippet

snippet main "main" b
(define (main args)
	$0
	0)
endsnippet
