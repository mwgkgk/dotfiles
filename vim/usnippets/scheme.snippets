# ||
# || Date
# ||

snippet / *da(te)?/ "date-file-start" "snip.line == 0" er
;;; `date-utc`

$0
endsnippet

priority -1

snippet / *da(te)?/ "Date" rb
;;; `date-utc`
${0}
endsnippet

snippet dd "dd-line-start" b
// `date-jiv`
endsnippet

priority 0

snippet dd "dd-inline" w
`!v system('date-jiv | tr -d "\n"')`${0}
endsnippet

# ||
# || Comments
# ||

snippet /^;?;?;/ ";;;" r
;;; ${VISUAL}$0
endsnippet

snippet /^(\s+);/ ";;" r
`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`;; ${VISUAL}$0
endsnippet

snippet | "|" b
;;; |||
;;; ||| ${VISUAL}$1
;;; |||$0
endsnippet

# ||
# || Imports
# ||

# TODO module name completion
snippet /(i|u)/ "guile use-modules" r
(use-modules (ice-9 ${1:match}))
endsnippet

snippet csreq "chicken-scheme require-extension" b
(require-extension ${1:shell})
endsnippet

# Bigloo
snippet "(\()?\bmod(ule)?" "module" rw
(module ${VISUAL}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Define
# ||

snippet "(\()?\bf" "defun" rw
(define (${1:name})
	${2:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet l "lambda" w
(lambda (${1:x}) ${2:#f})
endsnippet

snippet "(\()?\b(define|def|d)" "define" rw
(define $1 ${0:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# snippet main "main" b
# (define (main args)
# 	$0
# 	0)
# endsnippet

# ||
# || Let
# ||

snippet "(\()?\blet" "let" wr
(let
	(($1 ${3:(${2:${VISUAL}})})$4)
	${5:$1}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Flow control
# ||

snippet "(\()?\bif" "if" rw
(if (${1:condition})
	${2:#f}`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

snippet "(\()?\bcond" "cond" r
(cond
	($0${VISUAL})`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Predicates
# ||

# It's often used in cond clauses where we need the double opening parens,
# hence not the usual lisp-snippet thing.
snippet "\b(null|n)" "null" rw
(null? ${0:${VISUAL}})
endsnippet

# ||
# || Macros
# ||

snippet m "m" b
(define-syntax ${1:comment-out}
	(syntax-rules ($2)
		[($3) 
		($4)]))
endsnippet

# ||
# || Printing
# ||

snippet "(\()?\bp" "print" rw
(display ${2:"${1:Hello!}"}$0`!p
if match.group(1) is None:
	snip.rv = ")"`
endsnippet

# ||
# || Basement
# ||

# If line above is empty, basement:
# The #; reader macro makes ambient-form break on multiline
# Indent is bugged hence () there to make it easier
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
(when #f ; `!v system('date-jiv | tr -d "\n"')`
  $0
  #f)
endsnippet

# ||
# || Fallbacks
# ||

priority -1


snippet /([%\!:\w=\-\+><\*\/\?\.]+)_/ "expand-any-word-as-no-arguments-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`)$0
endsnippet

# This is only relevant at top-level, where otherwise it'd default to a new
# defun.
snippet /([%\!:\w=\-\+><\*\/\?\.]+)\+/ "expand-any-word-as-call" rw
(`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` $0)
endsnippet

snippet  /([\!:\w=\-\+><\*\?]+)'/ "expand-any-word-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

snippet  /(\([\s\!:\w=\-\+><\*\?]+\))'/ "expand-any-form-as-quote" rw
'`!p
if match.group(1) is not None:
	snip.rv = match.group(1)`$0
endsnippet

priority 0

snippet (' "expand (' as '(" w
'(
endsnippet

priority -1

snippet  /([\!:\w=\-\+><\*\?]+)\$/ "expand-any-word-as-let" rw
(let
	((`!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ${1:#f})$2)
	${0:#f})
endsnippet

priority -2

snippet /^([\!:\w=\-\+><\*\?]+)/ "expand-any-word-b" br
(define (`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` ${1:lst})
	${0:#f})
endsnippet

priority -3

snippet  /([\!:\w=\-\+><\*\?]+)/ "expand-any-word" rw
(`!p
if match.group(0) is not None:
	snip.rv = match.group(0)` $0)
endsnippet
