extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vec "std::vector" i
std::vector${VISUAL:/.+/<$0>/g}$0
endsnippet

snippet str "std::string" i
std::string$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet using "using" !b
using namespace $1;
endsnippet

snippet cout "cout" !b
std::cout << ${2:"${1:Hello}"} << "\n";
endsnippet

snippet cv "cout var" !b
std::cout << "${1:var}: " << ${2:$1} << "\n";
endsnippet

snippet fg "getter method" b
${1:int} ${2:name}() { return $2_; }
endsnippet

snippet fs "setter method" b
void set_${1:name}(const ${2:int} &${3:e}) { $1_ = $3; }
endsnippet

snippet fgs "getter and setter" b
${1:int} ${2:name}() { return $2_; }
void set_$2(const $1 &${3:e}) { $2_ = $3; }
endsnippet

snippet t "boost test case" b
BOOST_AUTO_TEST_CASE(test_$1) {
  ${VISUAL}$0
}
endsnippet

snippet tt "boost test case prototype" b
// BOOST_AUTO_TEST_CASE(test_$1) {}
endsnippet

snippet fore "Description" b
for (${1:std::string} ${2:item} : ${3:items})
	$0
endsnippet
# vim:ft=snippets:
