# ||
# || Date
# ||

snippet /^ *d(a)?(te)?/ "Date" rb
! `date-utc`

$0
endsnippet

snippet dac "dac" w
! `date-utc`
! $0
endsnippet

snippet dd "dd" b
`date-jiv`
endsnippet

# ||
# || Comments
# ||

snippet ; "comment-generic" w
! ${VISUAL}$0
endsnippet

snippet ! "comment" w
! ${VISUAL}$0
endsnippet

snippet * "comment-section" w
! ||
! || ${VISUAL}$0
! ||
endsnippet

# ||
# || Vocabs
# ||

snippet /^(ip|in|i)/ "IN" br
IN: ${0:`!v expand('%:t:r')`}
endsnippet

snippet /\b(using|usi|us|u)/ "USING" wr
USING: `!p 
if not snip.v.text:
	snip.rv = "multiline"
else:
	snip.rv = snip.v.text` ${0:${VISUAL}} ;
endsnippet

# ||
# || Words
# ||

snippet /^\b(C|c)/ "defconst" br
CONSTANT: ${1:science} ${0:0xff0f}
endsnippet

snippet f "word" b
: ${1:word} ( ${2:x} -- $3 )
	${VISUAL}$0
endsnippet

snippet : "short word" w
: ${1:word} ( ${2:x} -- $3 ) $0 ;
endsnippet

snippet ff "word w/ lexicals" b
:: ${1:word} ( ${2:x} -- $3 )
	${VISUAL}$0
endsnippet

snippet /(; )?(inline|inlin|inli|inl)/ "inline" wr
; inline
endsnippet

snippet [ "quotation" w
[ $0 
endsnippet

snippet priv "private" b
<PRIVATE

${VISUAL}$0

PRIVATE>
endsnippet

snippet t "test" b
{ ${1:t} } [ ${VISUAL}$2 ] unit-test
endsnippet

snippet main "main" b
MAIN: ${0:h-run}
endsnippet

# If line above is empty, basement:
snippet /^$/ "basement-implicit" "re.match('^$', snip.buffer[snip.line-1])" re
/*
${VISUAL}${1:`!p

if not snip.v.text:
	snip.rv = ""
`}
*/ ! `date-jiv`
endsnippet

# ||
# || Globals
# ||

snippet v "SYMBOL:" w
SYMBOL: ${VISUAL}$0
endsnippet

# ||
# || Object system
# ||

snippet g "defgeneric" w
GENERIC: ${VISUAL}$1 ( $0 )
endsnippet

snippet m "defmethod" w
M: ${VISUAL}$0 ;
endsnippet

snippet s "defstruct" w
TUPLE: ${VISUAL}$0 ;
endsnippet

# ||
# || Combinators
# ||

snippet bi "bi" w
[ ${VISUAL}$1 ] [ $0 ] bi
endsnippet

# ||
# || Filesystem
# ||

# Fri Feb  3 09:02:02 UTC 2023

snippet p "p" w
P" ~/${0:heap/}"
endsnippet

# ||
# || Fallbacks
# ||

priority -3

snippet /^([\!:\w=\-?\.$><\[\]]+)/ "expand-any-word-b" br
: `!p
if match.group(0) is not None:
	snip.rv = match.group(0)` ( $1 )$0
endsnippet

snippet /^: ([\!:\w=\-?\.$><\[\]]+)\s*/ "double-expand-any-word-b" br
: `!p
if match.group(1) is not None:
	snip.rv = match.group(1)` ( $1 )$0
endsnippet

snippet /\)\s*$/ "triple-expand-comment-to-;" wr
)
	${VISUAL}$0 ;
endsnippet

priority -4

snippet /([\!:\w=\-?\.$><\[\]]+)/ "expand-any-word" wr
[ `!p
if match.group(0) is not None:
	snip.rv = match.group(0)`$0 ]
endsnippet

priority 0
