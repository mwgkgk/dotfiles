#########################
# SNIPPETS for SNIPPETS #
#########################

# We use a little hack so that the snippet is expanded
# and parsed correctly
snippet /snip|f/ "Snippet definition" !rb
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:$1}" ${3:b}
$4
`!p snip.rv = "endsnippet"`
endsnippet

snippet fl "Lisp snippet" b
`!p snip.rv = "snippet"` "(\()?\b${1:trigger}" "${2:$1}" rw
($2
	$3\`!p
if match.group(1) is None:
	snip.rv = ")"\`
`!p snip.rv = "endsnippet"`
endsnippet

snippet snipi "Snippet definition" !
`!p snip.rv = "snippet"` /(\s+)${1:Tab_trigger}/ "${2:$1}" ${3:ir}
\`!p if match.group(1) is not None:
    snip.rv = match.group(1)\`$1$0
`!p snip.rv = "endsnippet"`
endsnippet

snippet global "Global snippet" !
`!p snip.rv = "global"` !p
$0
`!p snip.rv = "endglobal"`
endsnippet

#snippet vis "${VISUAL}" i
#\$\{VISUAL${1:${2:default}${3:/transform/}}\}
#endsnippet

snippet vis "visual" i
\${VISUAL}
endsnippet

snippet # "Section" b
# ||
# || ${1:Date}
# ||$0
endsnippet

snippet match "match" i
\`!p
if match.group(${1:0}) is not None:
    snip.rv = match.group($1)\`$0
endsnippet

snippet pp "python block" i
\`!p snip.rv = $1\`
endsnippet

snippet r "return" b
return $0
endsnippet
# vim:ft=snippets:
