extends jquery
extends phantomjs
extends node
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet forj "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet forj "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet f "function (fun)" !b
function ${1:function_name}(${2:props}) {
	return (
		${VISUAL}$0
	);
}
endsnippet

snippet r "return" b
return $0
endsnippet

snippet m "m" b
${1:methodName}() {
	const { ${2:something} } = this.state;
	$0
	this.setState({
		$2,
	});
}
endsnippet

snippet fn "anon function" i
function(${1:request, reply}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function ${1:name}($3) {
	${VISUAL}$2$5
}(${4:$3}));
endsnippet

snippet ifej "if ___ else"
if (${1:condition}) {
  ${2://code}
}
else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

# snippet if "Description" b
# if ($1)
# 	$0
# endsnippet

snippet timeout "setTimeout function"
window.setTimeout(function() {
  ${VISUAL}$0
}, ${1:10});
endsnippet

snippet "\s=" "===" r
${VISUAL} === $0
endsnippet

# Snippets for Console Debug Output

snippet log "console.log"
console.log(${1:JSON.stringify(${2:${VISUAL}}, null, 4)});
endsnippet

snippet sup "console.log"
console.log("${1:sup}");
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

snippet al "alert" !b
window.alert(${1:'sup'});
endsnippet

snippet reapply "Description" !b
function reapplyHandlers() {
	${0}
}

$(document).ajaxStop(function() {
    reapplyHandlers();
});

reapplyHandlers();
endsnippet

snippet trig "Trigger" !i
trigger('click');
endsnippet

snippet confirm "Confirm" !b
if(window.confirm('$1')) {
	$0
}
endsnippet

snippet iffn "if func" !b
if (typeof $1 === 'function') {
	$1($2);
}
endsnippet

snippet ifu "if not undefined" b
if (typeof $1 !== 'undefined') {
	${VISUAL}$0
}
endsnippet

snippet use "use strict" b
"use strict";

endsnippet

snippet { "{" i
{
	${VISUAL}$0
}
endsnippet

snippet enc "encodeURIComponent" i
encodeURIComponent(${VISUAL}$1)$0
endsnippet

snippet / *d(a)?(te)?/ "Date" rb
/* `date-utc` */
${0}
endsnippet

# JSX

snippet cl "cl" i
className="$1"
endsnippet

snippet divi "div id" b
<div id="${1}">${VISUAL}${2}</div>
endsnippet

snippet divc "forced inline <div>" b
<div className="${1}">
	${VISUAL}${2}
</div>
endsnippet

# React

snippet cons "constructor" b
constructor(props) {
	super(props);
	this.state = {
		${1:squares}: ${2:Array(9).fill(null)},
	};
}
endsnippet

# Jest

snippet t "test" b
test('${VISUAL}$1', () => {
  expect($2).toBe($3);
});
endsnippet

# vim:ft=snippets:
