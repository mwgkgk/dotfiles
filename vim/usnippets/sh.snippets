global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
    return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
    for scope in ["g", "b"]:
        for shell in ["bash", "sh", "kornshell"]:
            if testShell(scope, shell) == "1":
                if shell == "kornshell":
                    return "ksh"
                return shell
    return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet in "in" i
in
	*${1:word}* )
		$0;;
esac
endsnippet

snippet ) ")" i
${VISUAL})
	${0:echo >&2 "Branch under construction: ${1:${VISUAL}}"; exit 1}
	;;
endsnippet

snippet fori "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet for "for ... in ... done (forin)"
for ${1:arg}${2/.+/ in /}${2:"$@"}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${3:test ${1:$# -eq ${2:0}}}; then
	${VISUAL}${0:echo >&2 "Branch not implemented: $3"; exit 1}
fi
endsnippet

snippet then "then" i
then
	$0
fi
endsnippet

snippet else "else" b
else
	$0
endsnippet

snippet ife "ifexists" b
if test -f ${1:/tmp/${2:foo}.txt}; then
    ${VISUAL}$2
fi
endsnippet

snippet ifne "if not exists" b
if test -f ${1:/tmp/${2:foo}.txt}; then
	${VISUAL}$2
fi
endsnippet

snippet elif "elif .. (elif)"
elif ${2:test ${1:$# -eq 1}}; then
	${0:echo >&2 "Branch not implemented: $2"; exit 1}
endsnippet

snippet until "until ... (done)"
until ${2:[ ${1:condition} ]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:read -r ${1:line}}; do
	${0:echo "$$1"}
done
endsnippet

snippet do "do" i
do
	$0
done
endsnippet

snippet read "read" b
read -r -p "${1:Init as} (default=${2:mwgkgk}): " ${3:user}
test -z "$$3" && $3="$2"
endsnippet

snippet f "function" b
${1:function_name}() {
	${2:# TODO Implement $1()
	echo >&2 "Function under construction: $1"; exit 1}
}

: <<'BASEMENT'

${4:$1$3}

BASEMENT
endsnippet

snippet base "basename $0" i
$(basename "$0")
endsnippet

snippet a "alias" b
alias $1="$1$2"
endsnippet

# Half works
snippet /(^(\s*)e)|echo/ "e" r
`!p
if match.group(2) is not None:
    snip.rv = match.group(2)`echo "${1:Stdout!}"
endsnippet

snippet p "p" b
echo ${3:>&2} "${2:Stderr: $1!}"
endsnippet

snippet uc "uc" b
echo >&2 "${2:Under construction: $1}"
exit 1
endsnippet

snippet err "err" b
echo >&2 "${1:Unrecognized ${2:args}: $${3:*}}"
endsnippet

snippet erre "err" b
echo >&2 "${1:Unrecognized ${2:args}: $${3:*}}"; exit 1
endsnippet

snippet { "{" i
{
	$0
}
endsnippet

snippet /nul[l]?/ "null" ir
>/dev/null 2>&1
endsnippet

snippet 2 ">&2" i
>&2
endsnippet

# Shellcheck

snippet sc "shellcheck disable" b
# shellcheck disable=SC${2:20${1:86}}
endsnippet

snippet 68 "68" b
# shellcheck disable=SC68
endsnippet

snippet 86 "86" b
# shellcheck disable=SC86
endsnippet

# Shebangs

snippet #!/bin/dash "#!/bin/dash" b
#!/bin/dash

set -o errexit
set -o nounset
endsnippet

snippet #!/bin/bash "#!/bin/bash" b
#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
endsnippet

snippet ba "add-basement" b
: <<'BASEMENT'

${1:${VISUAL}}$0

BASEMENT
endsnippet

snippet us "usage" b
echo >&2 "usage: \$0 ${2:<${1:arg}>}"; exit 1
endsnippet

priority 1

snippet #
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet

# vim:ft=snippets:
