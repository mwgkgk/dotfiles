;; vim:ft=lisp:

(in-package :stumpwm)

(ql:quickload :vlime)
(vlime:main :interface #(127 0 0 1)
            :port 44820
            :backend :vlime-usocket)


;;; Root prefix
(set-prefix-key (kbd "s-space"))


;;; Esc on C-;
(define-key *top-map* (kbd "C-semicolon") "meta Escape")


;;; Help
(define-key *root-map* (kbd "k") "describe-key")


;;; Frames

;; Frame numbers:
(setf *frame-number-map* "123456789abcdefghijklmnopqrstuvxwyz")

;; Frame navigation:
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-l") "move-focus right")

;; Fselect:
(define-key *top-map* (kbd "s-1") "fselect 1")
(define-key *top-map* (kbd "s-2") "fselect 2")
(define-key *top-map* (kbd "s-3") "fselect 3")
(define-key *top-map* (kbd "s-4") "fselect 4")
(define-key *top-map* (kbd "s-5") "fselect 5")
(define-key *top-map* (kbd "s-6") "fselect 6")
(define-key *top-map* (kbd "s-7") "fselect 7")
(define-key *top-map* (kbd "s-8") "fselect 8")
(define-key *top-map* (kbd "s-9") "fselect 9")

;; Creating frames
(define-key *root-map* (kbd "N") "hsplit")
(define-key *root-map* (kbd "n") "vsplit")

;; Remove split
(define-key *root-map* (kbd "q") "remove-split")

;; Balance frames
(define-key *root-map* (kbd "=") "balance-frames")


;;; Windows

;; Move windows:
(define-key *top-map* (kbd "s-C-k") "move-window up")
(define-key *top-map* (kbd "s-C-j") "move-window down")
(define-key *top-map* (kbd "s-C-h") "move-window left")
(define-key *top-map* (kbd "s-C-l") "move-window right")

;; Kill program
(define-key *top-map* (kbd "s-Escape") "delete-window")
;; Kill -9
(define-key *top-map* (kbd "s-S-Escape") "kill-window")
;; Wother
(define-key *top-map* (kbd "M-TAB") "other-window")

;; Prev/next in-frame
(define-key *top-map* (kbd "s-p") "prev-in-frame")
(define-key *top-map* (kbd "s-n") "next-in-frame")

;; Frame-window lists
(define-key *top-map* (kbd "s-O") "frame-windows")
(define-key *root-map* (kbd "o") "frame-windowlist")
(define-key *top-map* (kbd "s-o") "vgroups")

#+nil
(progn
  ;; Windowlist format:
  *window-format*)


;;; Groups

;; Hmm: doesn't seem to work:
(setf *default-group-name* "departure")

(define-key *root-map* (kbd "c") "gnew")
(define-key *root-map* (kbd "space") "groups")
(define-key *root-map* (kbd "s-space") "gother")
(define-key *root-map* (kbd ",") "grename")

(define-key *top-map* (kbd "s-TAB") "grouplist")

(define-key *groups-map* (kbd "c") "gkill")
(define-key *groups-map* (kbd "C") "kill-windows-current-group")
(define-key *groups-map* (kbd "C") "kill-windows-other")

(define-key *root-map* (kbd "1") "gselect 1")
(define-key *root-map* (kbd "2") "gselect 2")
(define-key *root-map* (kbd "3") "gselect 3")
(define-key *root-map* (kbd "4") "gselect 4")
(define-key *root-map* (kbd "5") "gselect 5")
(define-key *root-map* (kbd "6") "gselect 6")
(define-key *root-map* (kbd "7") "gselect 7")
(define-key *root-map* (kbd "8") "gselect 8")
(define-key *root-map* (kbd "9") "gselect 9")

(define-key *root-map* (kbd "s-1") "gselect 1")
(define-key *root-map* (kbd "s-2") "gselect 2")
(define-key *root-map* (kbd "s-3") "gselect 3")
(define-key *root-map* (kbd "s-4") "gselect 4")
(define-key *root-map* (kbd "s-5") "gselect 5")
(define-key *root-map* (kbd "s-6") "gselect 6")
(define-key *root-map* (kbd "s-7") "gselect 7")
(define-key *root-map* (kbd "s-8") "gselect 8")
(define-key *root-map* (kbd "s-9") "gselect 9")


;;; Messages

(set-border-color "#87d700")
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(setf *suppress-frame-indicator* t)

;; Redisplay last message:
(define-key *top-map* (kbd "s-Up") "lastmsg")

;; Info
(define-key *root-map* (kbd "i") "show-window-properties")
(define-key *root-map* (kbd "I") "info")

;; Hide the message (by displaying frame indicator)
(define-key *root-map* (kbd "RET") "curframe")


;;; Mouse
(setf *mouse-focus-policy* :sloppy)


;;; Font & Borders
(set-font "-*-hack-medium-r-*-*-11-*-*-*-*-*-*-*")
(setf *text-color* "#ffff87") ; This one doesn't work.

(set-focus-color "#87d700")
(setf *normal-border-width* 1)
(setf *window-border-style* :thin)

#+nil
(progn
  (sync-all-frame-windows (current-group))
  (mapcar #'sync-all-frame-windows (screen-groups (current-screen))))

#+nil
(progn
  (echo "hi")
  (mode-line)
  (describe-function #'set-font)
  (describe-command :send-escape)
  (run-commands "describe-key")
  (run-commands "describe-command")
  (apropos "gravity")
  ;; This is interesting with regards to color escape sequences:
  *startup-message*)


;;; Spawn

(define-key *top-map* (kbd "s-w") "exec burrow ~/.burrow/quick-launch")

(define-key *root-map* (kbd "t") "exec tileterm")


;;; Overlays

;; TODO Map keys to functions
;; TODO Wrapper function to send keys with a delay
;; TODO x: thunderbird-open-link
;; TODO c: thunderbird-open-link-with-image
(define-remapped-keys
  '(("Thunderbird"
     ("w" . "Up")
     ("s" . "Down")
     ("a" . "S-TAB")
     ("d" . "TAB")

     ("k" . "Up")
     ("j" . "Down")
     ("h" . "S-TAB")
     ("l" . "TAB")

     ("f" . "n")

     ("q" . ("S-TAB" "Up" "TAB"))
     ;; TODO Delay 100
     ("e" . ("S-TAB" "Down" "n"))

     ("v" . ("Down" "Down" "Down" "Down" "Down")))))


;;; Rules

(setf *suppress-deny-messages* t)
(push '(:instance "Navigator") *deny-raise-request*)
