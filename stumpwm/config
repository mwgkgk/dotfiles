;; vim:ft=lisp:

(in-package :stumpwm)

;;; pacman-based stump doesn't know about ql
#+#:nil
(ql:quickload '(#:cotp))

#+#:nil
(cotp:open-repl)

;;; Root prefix
(set-prefix-key (kbd "s-space"))


;;; Esc on C-;
(define-key *top-map* (kbd "C-semicolon") "meta Escape")


;;; Help
(define-key *root-map* (kbd "k") "describe-key")


;;; Frames

;; Frame numbers:
(setf *frame-number-map* "123456789abcdefghijklmnopqrstuvxwyz")

;; Don't pull windows into new frames:
(setf *new-frame-action* :empty)

;; Supress frame indicator:
(setf *suppress-frame-indicator* t)

;; Frame navigation:
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-l") "move-focus right")

;; Fselect:
(define-key *top-map* (kbd "s-1") "fselect 1")
(define-key *top-map* (kbd "s-2") "fselect 2")
(define-key *top-map* (kbd "s-3") "fselect 3")
(define-key *top-map* (kbd "s-4") "fselect 4")
(define-key *top-map* (kbd "s-5") "fselect 5")
(define-key *top-map* (kbd "s-6") "fselect 6")
(define-key *top-map* (kbd "s-7") "fselect 7")
(define-key *top-map* (kbd "s-8") "fselect 8")
(define-key *top-map* (kbd "s-9") "fselect 9")

;; Creating frames
(define-key *root-map* (kbd "N") "split-run right 50 tileterm")
(define-key *root-map* (kbd "s-N") "split-run right 50 tileterm")
(define-key *root-map* (kbd "n") "split-run down 50 tileterm")
(define-key *root-map* (kbd "s-n") "split-run down 50 tileterm")

;; Remove split
(define-key *root-map* (kbd "q") "remove-split")
(define-key *top-map* (kbd "s-q") "remove-split")

;; TODO Remove split, remember program on d, paste on p
(define-key *root-map* (kbd "d") "remove-split")

;; Balance frames
(define-key *root-map* (kbd "=") "balance-frames")

;; Only frame:
(define-key *root-map* (kbd "s-S-SPC") "only")


;;; Windows

;; Move windows:
(define-key *top-map* (kbd "s-C-k") "move-window up")
(define-key *top-map* (kbd "s-C-j") "move-window down")
(define-key *top-map* (kbd "s-C-h") "move-window left")
(define-key *top-map* (kbd "s-C-l") "move-window right")

;; Kill program
(define-key *top-map* (kbd "s-Escape") "delete-window")
;; Kill -9
(define-key *top-map* (kbd "s-S-Escape") "kill-window")
;; Wother
(define-key *top-map* (kbd "M-TAB") "other-window")

;; Prev/next in-frame
(define-key *top-map* (kbd "s-p") "prev-in-frame")
(define-key *top-map* (kbd "s-n") "next-in-frame")
;; TODO prev/next hidden window regardless of frame

;; Frame-window lists
(define-key *top-map* (kbd "s-O") "frame-windows")
(define-key *root-map* (kbd "o") "frame-windowlist")
(define-key *top-map* (kbd "s-o") "vgroups")

#+nil
(progn
  ;; Windowlist format:
  *window-format*)


;;; Groups

;; Hmm: doesn't seem to work:
(setf *default-group-name* "departure")

(define-key *root-map* (kbd "c") "gnew")
(define-key *root-map* (kbd "space") "groups")
(define-key *root-map* (kbd "s-space") "gother")
(define-key *root-map* (kbd ",") "grename")

(define-key *top-map* (kbd "s-TAB") "grouplist")

(define-key *groups-map* (kbd "c") "gkill")
(define-key *groups-map* (kbd "C") "kill-windows-current-group")
(define-key *groups-map* (kbd "C") "kill-windows-other")

(define-key *root-map* (kbd "1") "gselect 1")
(define-key *root-map* (kbd "2") "gselect 2")
(define-key *root-map* (kbd "3") "gselect 3")
(define-key *root-map* (kbd "4") "gselect 4")
(define-key *root-map* (kbd "5") "gselect 5")
(define-key *root-map* (kbd "6") "gselect 6")
(define-key *root-map* (kbd "7") "gselect 7")
(define-key *root-map* (kbd "8") "gselect 8")
(define-key *root-map* (kbd "9") "gselect 9")

(define-key *root-map* (kbd "s-1") "gselect 1")
(define-key *root-map* (kbd "s-2") "gselect 2")
(define-key *root-map* (kbd "s-3") "gselect 3")
(define-key *root-map* (kbd "s-4") "gselect 4")
(define-key *root-map* (kbd "s-5") "gselect 5")
(define-key *root-map* (kbd "s-6") "gselect 6")
(define-key *root-map* (kbd "s-7") "gselect 7")
(define-key *root-map* (kbd "s-8") "gselect 8")
(define-key *root-map* (kbd "s-9") "gselect 9")


;;; Message window

(set-font "-*-hack-medium-r-*-*-11-*-*-*-*-*-*-*")
(set-fg-color "#F7DC75")
(set-border-color "#6F9D7F")

(setf *message-window-gravity* :center)

;; Redisplay last message:
(define-key *top-map* (kbd "s-Up") "lastmsg")
;; TODO Complementary nextmsg

;; Hide the message (by displaying frame indicator)
(define-key *top-map* (kbd "s-Left") "curframe")

;; Info
(define-key *root-map* (kbd "i") "show-window-properties")
(define-key *root-map* (kbd "I") "info")


;;; Input window

(setf *input-window-gravity* :center)
(setf *input-history-ignore-duplicates* t)

(define-key *input-map* (kbd "C-w") 'input-backward-kill-word)
(define-key *input-map* (kbd "C-j") 'input-complete-forward)
(define-key *input-map* (kbd "C-k") 'input-complete-backward)


;;; Mouse
(setf *mouse-focus-policy* :sloppy)


;;; Window borders

(set-focus-color "#6F9D7F")
(setf *normal-border-width* 1)
(setf *window-border-style* :thin)

#+nil
(progn
  (sync-all-frame-windows (current-group))
  (mapcar #'sync-all-frame-windows (screen-groups (current-screen))))

#+nil
(progn
  (echo "hi")
  (mode-line)
  (describe-function #'set-font)
  (describe-command :send-escape)
  (run-commands "describe-key")
  (run-commands "describe-command")
  (apropos "gravity")
  ;; This is interesting with regards to color escape sequences:
  *startup-message*)


;;; Mode Line

(define-key *top-map* (kbd "s-B") "mode-line")

;;; TODO load ppcre though quicklisp
#+#:nil
(defun acpi-info ()
  (with-output-to-string (out)
    (uiop:run-program "acpi" :output out)
    out))

(setf *screen-mode-line-format* "%n %W^>%d")
;; TODO investigate urxvt crash on maximize with mode-line-border-width 0
(setf *mode-line-border-width* 1)
(setf *mode-line-border-color* "#1A1A1A")
(setf *mode-line-background-color* "#000000")
(setf *mode-line-foreground-color* "#777777")


;;; Debug

(defcommand debug-mode (enable)
  ((:y-or-n "Enable debug mode? (Y/n)"))
  (if enable
    (progn
      (setf *debug-level* 7)
      (redirect-all-output (data-dir-file "debug-output" "txt")))
    (progn
      ;; TODO Unclear how to also revert the effects of redirect-all-output
      (setf *debug-level* 0))))


;;; Spawn

(define-key *top-map* (kbd "s-w") "exec burrow ~/.burrow/quick-launch")

(define-key *root-map* (kbd "t") "exec tileterm")


;;; Commands

(defcommand split-run (direction split-percentage shell-command)
    ((:direction "Enter direction: ")
     (:number "Enter split percentage: ")
     (:shell "Enter shell command: "))
  (let*
    ;; TODO implement left, up (prob using exchange-direction)
    ((direction-map '((:up . "vsplit")
                      (:down . "vsplit")
                      (:left . "hsplit")
                      (:right . "hsplit")))
     (split-cmd (format nil "~a ~d"
                        (cdr (assoc direction direction-map))
                        (- 1 (/ 1 (/ 100 split-percentage))))))
    (run-commands split-cmd
                  "fother"
                  (format nil "exec ~a" shell-command))))

#+nil
(progn
  (format nil "vsplit ~d" (- 1 (/ 1 (/ 100 20))))
  (run-commands "split-run right 50 tileterm vifm"))

(defcommand run-shell-echo (cmd)
  ((:shell "Enter shell command: "))
  (if (plusp (length cmd)) (echo (run-shell-command cmd t))))

#+nil
(progn
  (echo (run-shell-command "gmt" t)))


;;; Leader

(defparameter *leader-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "s-semicolon") "colon")
    (define-key m (kbd "s-space") '*leader-space-map*)
    (define-key m (kbd "s-n") "vsplit")
    (define-key m (kbd "n") "vsplit")
    (define-key m (kbd "s-N") "hsplit")
    (define-key m (kbd "N") "hsplit")
    (define-key m (kbd "s-quoteright") "run-shell-echo")
    m))

(define-key *top-map* (kbd "s-semicolon") '*leader-map*)

(defparameter *leader-space-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "s-n") "split-run down 50 tileterm")
    (define-key m (kbd "n") "split-run down 50 tileterm")
    (define-key m (kbd "s-N") "split-run right 50 tileterm")
    (define-key m (kbd "N") "split-run right 50 tileterm")
    m))


;;; Browser-leader

(define-key *top-map*
            (kbd "s-e") 
            (let ((m (make-sparse-keymap)))
              ;; TODO make a macro to generate these 4 lines (plus others)
              (define-key m (kbd "n") "split-run down 50 firefox-default")
              (define-key m (kbd "S-n") "split-run down 50 firefox-default")
              (define-key m (kbd "N") "split-run right 50 firefox-default")
              (define-key m (kbd "s-N") "split-run right 50 firefox-default")
              m))


;;; Overlays

;; Circumvent remapped keys
(define-key *root-map* (kbd "s") "send-raw-key")

;; TODO Map keys to functions
;; TODO Wrapper function to send keys with a delay
;; TODO x: thunderbird-open-link
;; TODO c: thunderbird-open-link-with-image
(define-remapped-keys
  '(("Thunderbird"
     ("w" . "Up")
     ("s" . "Down")
     ("a" . "S-TAB")
     ("d" . "TAB")

     ("k" . "Up")
     ("j" . "Down")
     ("h" . "S-TAB")
     ("l" . "TAB")

     ("f" . "n")

     ("q" . ("S-TAB" "Up" "TAB"))
     ;; TODO Delay 100
     ("e" . ("S-TAB" "Down" "n"))

     ("v" . ("Down" "Down" "Down" "Down" "Down")))))


;;; Rules

(setf *suppress-deny-messages* t)
(push '(:instance "Navigator") *deny-raise-request*)

(define-frame-preference "ink"
  (0 t t :class "URxvt" :instance "zepp"))
